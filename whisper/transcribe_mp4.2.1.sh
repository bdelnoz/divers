#!/bin/bash
#
# Auteur : Bruno Delnoz
# Email : bruno.delnoz@protonmail.com
# Nom du script : transcribe_mp4.sh
# Target usage : Transcription d'un fichier MP4 en texte avec whisper.cpp
# Version : v2.1 - Date : 2025-08-17
# Changelog :
#   v1.0 - 2025-08-10 - Script initial pour transcrire un MP4 avec whisper.cpp
#   v1.1 - 2025-08-11 - Ajout gestion logs, help, et v√©rification binaire whisper
#   v1.2 - 2025-08-11 - Ajout affichage actions et support arguments doubles tirets
#   v1.3 - 2025-08-12 - Correction chemin du binaire whisper dans whisper.cpp/build/bin
#   v1.4 - 2025-08-12 - Correction nom binaire (whisper-cli), gestion mod√®les, logs propres, actions num√©rot√©es
#   v1.5 - 2025-08-12 - Ajout toutes valeurs options possibles langues et mod√®les
#   v1.6 - 2025-08-12 - Langue par d√©faut fran√ßaise au lieu d'auto-d√©tection
#   v1.7 - 2025-08-12 - Correction gestion espaces dans noms fichiers, protection quotes
#   v1.8 - 2025-08-16 - Ajout analyse audio pr√©alable avec option --analyze
#   v1.9 - 2025-08-16 - Am√©lioration test: 3 √©chantillons de 20sec √† diff√©rents endroits
#   v2.0 - 2025-08-17 - Ajout --folder pour traitement par lot + analyse d√©taill√©e avec solutions
#   v2.1 - 2025-08-17 - Correction d√©tection fichiers vid√©o + debug am√©lior√©

set -e

# Variables globales
WHISPER_BIN="./whisper.cpp/build/bin/whisper-cli"
MODELS_DIR="./whisper.cpp/models"
LOG_FILE="log.transcribe_mp4.v2.0.log"
ACTIONS_LOG=()

# Extensions vid√©o support√©es
VIDEO_EXTENSIONS=("mp4" "avi" "mkv" "mov" "wmv" "flv" "webm" "m4v" "3gp" "ogv" "ts" "mts" "m2ts")

# Fonction de logging
log_action() {
    local action="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $action" >> "$LOG_FILE"
    ACTIONS_LOG+=("$action")
}

# Fonction d'affichage des actions
show_actions() {
    echo ""
    echo "=== ACTIONS EXECUTEES ==="
    for i in "${!ACTIONS_LOG[@]}"; do
        echo "$((i+1)). ${ACTIONS_LOG[$i]}"
    done
}

# Fonction pour d√©tecter les extensions vid√©o
is_video_file() {
    local file="$1"
    local extension="${file##*.}"
    extension="${extension,,}" # conversion en minuscules

    for ext in "${VIDEO_EXTENSIONS[@]}"; do
        if [ "$extension" = "$ext" ]; then
            return 0
        fi
    done
    return 1
}

# Fonction d'analyse audio d√©taill√©e avec solutions pr√©cises
analyze_audio() {
    local file="$1"
    local audio_issues=0
    local solutions=()
    local critical_issues=()

    echo ""
    echo "=== ANALYSE AUDIO DETAILLEE POUR WHISPER ==="
    echo "Fichier analys√© : $file"
    echo ""

    log_action "D√©but analyse audio d√©taill√©e '$file'"

    # V√©rification pr√©requis
    if ! command -v ffprobe >/dev/null 2>&1; then
        echo "‚ùå ERREUR CRITIQUE : ffprobe requis pour l'analyse"
        critical_issues+=("Installer le paquet ffmpeg : sudo apt install ffmpeg (Ubuntu/Debian) ou brew install ffmpeg (macOS)")
        return 1
    fi

    # Extraction infos audio avec ffprobe
    echo "üîç D√âTECTION DES FLUX AUDIO :"

    local audio_streams=$(ffprobe -v quiet -select_streams a -show_streams "$file" 2>/dev/null || echo "")

    if [ -z "$audio_streams" ]; then
        echo "‚ùå ERREUR CRITIQUE : AUCUN FLUX AUDIO D√âTECT√â"
        critical_issues+=("Le fichier ne contient pas de piste audio utilisable")
        critical_issues+=("SOLUTIONS POSSIBLES :")
        critical_issues+=("  1. V√©rifier que le fichier n'est pas corrompu : ffprobe -v error '$file'")
        critical_issues+=("  2. Essayer de r√©encoder : ffmpeg -i '$file' -c:v copy -c:a aac '$file.fixed.mp4'")
        critical_issues+=("  3. Utiliser un autre fichier source avec audio")
        log_action "Erreur critique : aucun flux audio d√©tect√©"

        echo ""
        echo "üö® PROBL√àMES CRITIQUES D√âTECT√âS :"
        for issue in "${critical_issues[@]}"; do
            echo "   $issue"
        done
        return 1
    fi

    # Compter les flux audio
    local audio_count=$(ffprobe -v quiet -select_streams a -show_entries stream=index -of csv=p=0 "$file" 2>/dev/null | wc -l)
    echo "‚úÖ Nombre de flux audio : $audio_count"

    if [ "$audio_count" -gt 1 ]; then
        echo "‚ÑπÔ∏è  Note : Whisper utilisera automatiquement le premier flux audio"
    fi

    # Analyse d√©taill√©e du premier flux audio
    echo ""
    echo "üìä ANALYSE D√âTAILL√âE DU FLUX AUDIO PRINCIPAL :"

    local codec=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "inconnu")
    local sample_rate=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=sample_rate -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "0")
    local channels=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=channels -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "0")
    local bit_rate=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "inconnu")
    local duration=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "0")
    local bit_depth=$(ffprobe -v quiet -select_streams a:0 -show_entries stream=bits_per_sample -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "inconnu")

    echo "  Codec audio : $codec"
    echo "  Fr√©quence √©chantillonnage : ${sample_rate} Hz"
    echo "  Nombre de canaux : $channels"
    echo "  D√©bit binaire : ${bit_rate} bps"
    echo "  Profondeur bits : ${bit_depth} bits"
    if [ "$duration" != "0" ] && [ "$duration" != "N/A" ]; then
        echo "  Dur√©e audio : $(printf "%.1f" "$duration")s"
    fi

    echo ""
    echo "‚úÖ ANALYSE DE COMPATIBILIT√â WHISPER :"

    # === ANALYSE CODEC ===
    echo ""
    echo "üîß CODEC AUDIO :"
    case "$codec" in
        aac)
            echo "  ‚úÖ AAC : Codec optimal pour Whisper"
            ;;
        mp3)
            echo "  ‚úÖ MP3 : Parfaitement support√©"
            ;;
        wav|pcm*)
            echo "  ‚úÖ WAV/PCM : Format natif Whisper, aucune conversion n√©cessaire"
            ;;
        flac)
            echo "  ‚úÖ FLAC : Excellente qualit√©, bien support√©"
            ;;
        ogg|vorbis|opus)
            echo "  ‚úÖ OGG/Vorbis/Opus : Bien support√©"
            ;;
        ac3|eac3)
            echo "  ‚ö†Ô∏è  AC-3/E-AC-3 : Support√© mais conversion recommand√©e"
            solutions+=("Convertir en AAC pour de meilleures performances : ffmpeg -i '$file' -c:v copy -c:a aac -b:a 128k '$file.aac.mp4'")
            audio_issues=$((audio_issues + 1))
            ;;
        dts|truehd)
            echo "  ‚ö†Ô∏è  DTS/TrueHD : Format HD, conversion n√©cessaire"
            solutions+=("Convertir obligatoirement : ffmpeg -i '$file' -c:v copy -c:a aac -b:a 192k '$file.converted.mp4'")
            audio_issues=$((audio_issues + 1))
            ;;
        *)
            echo "  ‚ùå Codec non standard ou inconnu : $codec"
            solutions+=("SOLUTION URGENTE - Convertir le codec : ffmpeg -i '$file' -c:v copy -c:a aac -b:a 128k '$file.fixed.mp4'")
            audio_issues=$((audio_issues + 2))
            ;;
    esac

    # === ANALYSE FR√âQUENCE D'√âCHANTILLONNAGE ===
    echo ""
    echo "üì° FR√âQUENCE D'√âCHANTILLONNAGE :"
    if [ "$sample_rate" -ge 44100 ]; then
        echo "  ‚úÖ ${sample_rate} Hz : Excellente qualit√© (‚â•44.1kHz)"
    elif [ "$sample_rate" -ge 22050 ]; then
        echo "  ‚úÖ ${sample_rate} Hz : Tr√®s bonne qualit√© (‚â•22kHz)"
    elif [ "$sample_rate" -ge 16000 ]; then
        echo "  ‚úÖ ${sample_rate} Hz : Qualit√© correcte (‚â•16kHz requis minimum)"
    elif [ "$sample_rate" -ge 8000 ]; then
        echo "  ‚ö†Ô∏è  ${sample_rate} Hz : Fr√©quence faible, qualit√© d√©grad√©e"
        solutions+=("Am√©liorer la qualit√© : ffmpeg -i '$file' -c:v copy -c:a aac -ar 22050 '$file.22k.mp4'")
        audio_issues=$((audio_issues + 1))
    else
        echo "  ‚ùå ${sample_rate} Hz : Fr√©quence tr√®s faible, transcription fortement compromise"
        solutions+=("SOLUTION URGENTE - R√©chantillonner : ffmpeg -i '$file' -c:v copy -c:a aac -ar 16000 '$file.16k.mp4'")
        audio_issues=$((audio_issues + 2))
    fi

    # === ANALYSE CANAUX ===
    echo ""
    echo "üîä CONFIGURATION DES CANAUX :"
    if [ "$channels" -eq 1 ]; then
        echo "  ‚úÖ Audio MONO : Configuration optimale pour Whisper"
    elif [ "$channels" -eq 2 ]; then
        echo "  ‚úÖ Audio ST√âR√âO : Sera automatiquement converti en mono"
        echo "     ‚ÑπÔ∏è  Whisper mixe automatiquement les canaux L+R"
    elif [ "$channels" -gt 2 ] && [ "$channels" -le 8 ]; then
        echo "  ‚ÑπÔ∏è  Audio MULTICANAL ($channels canaux) : Conversion automatique en mono"
        echo "     ‚ÑπÔ∏è  Pour pr√©server une piste sp√©cifique :"
        solutions+=("Extraire canal sp√©cifique : ffmpeg -i '$file' -af 'pan=mono|c0=0.5*c0+0.5*c1' -c:v copy '$file.mono.mp4'")
    else
        echo "  ‚ùå Configuration de canaux invalide : $channels"
        solutions+=("SOLUTION - Forcer st√©r√©o : ffmpeg -i '$file' -c:v copy -ac 2 '$file.stereo.mp4'")
        audio_issues=$((audio_issues + 1))
    fi

    # === ANALYSE D√âBIT BINAIRE ===
    echo ""
    echo "üíæ D√âBIT BINAIRE :"
    if [ "$bit_rate" != "inconnu" ] && [ "$bit_rate" != "N/A" ]; then
        local bit_rate_kb=$((bit_rate / 1000))
        if [ "$bit_rate_kb" -ge 128 ]; then
            echo "  ‚úÖ ${bit_rate_kb} kbps : D√©bit excellent pour la transcription"
        elif [ "$bit_rate_kb" -ge 64 ]; then
            echo "  ‚úÖ ${bit_rate_kb} kbps : D√©bit suffisant"
        elif [ "$bit_rate_kb" -ge 32 ]; then
            echo "  ‚ö†Ô∏è  ${bit_rate_kb} kbps : D√©bit faible, qualit√© possiblement r√©duite"
            solutions+=("Am√©liorer le d√©bit : ffmpeg -i '$file' -c:v copy -c:a aac -b:a 128k '$file.128k.mp4'")
            audio_issues=$((audio_issues + 1))
        else
            echo "  ‚ùå ${bit_rate_kb} kbps : D√©bit tr√®s faible, qualit√© fortement compromise"
            solutions+=("SOLUTION URGENTE - Augmenter le d√©bit : ffmpeg -i '$file' -c:v copy -c:a aac -b:a 128k '$file.highq.mp4'")
            audio_issues=$((audio_issues + 2))
        fi
    else
        echo "  ‚ÑπÔ∏è  D√©bit inconnu (format lossless probable)"
    fi

    # Tests de conversion pratiques
    echo ""
    echo "üß™ TESTS DE CONVERSION WHISPER (3 √©chantillons de 20 secondes) :"

    # Calcul de la dur√©e totale
    local total_duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null || echo "0")

    if [ "$total_duration" = "0" ] || [ "$(echo "$total_duration < 60" | bc -l 2>/dev/null || echo "1")" = "1" ]; then
        echo "  ‚ö†Ô∏è  Vid√©o courte (${total_duration%.*}s) - Test unique de 20 secondes"

        # Test unique pour vid√©os courtes
        local test_wav="${file%.*}_whisper_test.wav"
        echo "  üîÑ Test extraction audio WAV 16kHz mono (20 premi√®res secondes)..."

        if ffmpeg -y -i "$file" -vn -acodec pcm_s16le -ar 16000 -ac 1 -t 20 "$test_wav" >/dev/null 2>&1; then
            # V√©rification qualit√© du fichier g√©n√©r√©
            if [ -f "$test_wav" ]; then
                local wav_size=$(stat -c%s "$test_wav" 2>/dev/null || stat -f%z "$test_wav" 2>/dev/null || echo "0")
                local wav_duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$test_wav" 2>/dev/null || echo "0")
                local expected_size=$((20 * 16000 * 2)) # 20sec * 16kHz * 2bytes

                if [ "$wav_size" -gt $((expected_size / 2)) ] && [ "${wav_duration%.*}" -ge 15 ]; then
                    echo "    ‚úÖ Conversion r√©ussie - Taille: $(numfmt --to=iec "$wav_size" 2>/dev/null || echo "${wav_size}B") - Dur√©e: ${wav_duration%.*}s"
                else
                    echo "    ‚ùå Fichier WAV d√©faillant - Taille: $(numfmt --to=iec "$wav_size" 2>/dev/null || echo "${wav_size}B")"
                    solutions+=("PROBL√àME DE CONVERSION - Essayer : ffmpeg -i '$file' -vn -acodec pcm_s16le -ar 16000 -ac 1 '$file.debug.wav'")
                    audio_issues=$((audio_issues + 2))
                fi
                rm -f "$test_wav"
            fi
        else
            echo "    ‚ùå √âCHEC TOTAL de la conversion audio"
            solutions+=("ERREUR CRITIQUE - V√©rifier l'int√©grit√© : ffmpeg -v error -i '$file' -f null - 2>error.log")
            audio_issues=$((audio_issues + 3))
        fi
    else
        # Tests multiples pour vid√©os longues
        echo "  üìè Dur√©e totale : ${total_duration%.*}s - Tests √† 3 positions strat√©giques"

        # Calcul des 3 positions optimales
        local pos1=$(echo "$total_duration * 0.10" | bc -l 2>/dev/null || echo "5")
        local pos2=$(echo "$total_duration * 0.50" | bc -l 2>/dev/null || echo "$(echo "$total_duration / 2" | bc -l)")
        local pos3=$(echo "$total_duration * 0.85" | bc -l 2>/dev/null || echo "$(echo "$total_duration - 25" | bc -l)")

        # S√©curiser pos3 pour √©viter de d√©passer
        if [ "$(echo "$pos3 + 20 > $total_duration" | bc -l 2>/dev/null || echo "0")" = "1" ]; then
            pos3=$(echo "$total_duration - 25" | bc -l 2>/dev/null || echo "$pos3")
        fi

        local positions=("$pos1" "$pos2" "$pos3")
        local position_names=("D√âBUT (10%)" "MILIEU (50%)" "FIN (85%)")
        local test_passed=0
        local test_issues=()

        for i in "${!positions[@]}"; do
            local pos="${positions[$i]}"
            local pos_name="${position_names[$i]}"
            local test_wav="${file%.*}_whisper_test_$((i+1)).wav"

            echo "  üîÑ Test $((i+1))/3 - ${pos_name} √† ${pos%.*}s :"

            if ffmpeg -y -i "$file" -vn -acodec pcm_s16le -ar 16000 -ac 1 -ss "$pos" -t 20 "$test_wav" >/dev/null 2>&1; then
                if [ -f "$test_wav" ]; then
                    local wav_size=$(stat -c%s "$test_wav" 2>/dev/null || stat -f%z "$test_wav" 2>/dev/null || echo "0")
                    local wav_duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$test_wav" 2>/dev/null || echo "0")
                    local expected_size=$((20 * 16000 * 2))

                    if [ "$wav_size" -gt $((expected_size / 2)) ] && [ "${wav_duration%.*}" -ge 15 ]; then
                        echo "    ‚úÖ Test r√©ussi - ${wav_size} bytes, ${wav_duration%.*}s"
                        test_passed=$((test_passed + 1))
                    else
                        echo "    ‚ö†Ô∏è  Test suspect - Taille: ${wav_size}B, Dur√©e: ${wav_duration%.*}s"
                        test_issues+=("Position ${pos_name}: fichier WAV anormalement petit")
                        audio_issues=$((audio_issues + 1))
                    fi
                    rm -f "$test_wav"
                else
                    echo "    ‚ùå Fichier WAV non cr√©√©"
                    test_issues+=("Position ${pos_name}: √©chec cr√©ation WAV")
                    audio_issues=$((audio_issues + 1))
                fi
            else
                echo "    ‚ùå √âCHEC conversion √† cette position"
                test_issues+=("Position ${pos_name}: erreur ffmpeg lors de la conversion")
                audio_issues=$((audio_issues + 1))
                rm -f "$test_wav" 2>/dev/null
            fi
        done

        echo ""
        echo "  üìä R√âSULTATS D√âTAILL√âS DES TESTS :"
        echo "    Tests r√©ussis : $test_passed/3"

        if [ "$test_passed" -eq 3 ]; then
            echo "    ‚úÖ TOUS LES TESTS R√âUSSIS : Fichier parfaitement compatible"
        elif [ "$test_passed" -eq 2 ]; then
            echo "    ‚ö†Ô∏è  2/3 tests r√©ussis : Compatible avec quelques r√©serves"
            for issue in "${test_issues[@]}"; do
                echo "      ‚Ä¢ $issue"
            done
        elif [ "$test_passed" -eq 1 ]; then
            echo "    ‚ö†Ô∏è  1/3 test r√©ussi : Probl√®mes fr√©quents d√©tect√©s"
            solutions+=("R√©encoder le fichier complet : ffmpeg -i '$file' -c:v copy -c:a aac -ar 22050 -b:a 128k '$file.reencoded.mp4'")
        else
            echo "    ‚ùå AUCUN TEST R√âUSSI : Fichier incompatible ou corrompu"
            solutions+=("SOLUTION D'URGENCE - R√©encoder compl√®tement : ffmpeg -i '$file' -c:v libx264 -c:a aac -ar 16000 -ac 1 -b:a 96k '$file.fixed.mp4'")
            audio_issues=$((audio_issues + 3))
        fi
    fi

    # === VERDICT FINAL AVEC SOLUTIONS ===
    echo ""
    echo "========================================"
    echo "=== VERDICT FINAL DE COMPATIBILIT√â ==="
    echo "========================================"

    if [ "$audio_issues" -eq 0 ]; then
        echo "‚úÖ FICHIER PARFAITEMENT COMPATIBLE AVEC WHISPER"
        echo "   ‚Üí Transcription possible avec qualit√© OPTIMALE"
        echo "   ‚Üí Aucune modification n√©cessaire"
        log_action "Analyse audio parfaite : fichier optimal pour Whisper"
        return 0

    elif [ "$audio_issues" -le 2 ]; then
        echo "‚ö†Ô∏è  FICHIER COMPATIBLE AVEC R√âSERVES ($audio_issues point(s) d'attention)"
        echo "   ‚Üí Transcription possible, qualit√© BONNE √† CORRECTE"
        echo "   ‚Üí Am√©liorations recommand√©es mais optionnelles"

        if [ "${#solutions[@]}" -gt 0 ]; then
            echo ""
            echo "üí° SOLUTIONS RECOMMAND√âES POUR OPTIMISER :"
            for i in "${!solutions[@]}"; do
                echo "   $((i+1)). ${solutions[$i]}"
            done
        fi

        log_action "Analyse audio OK avec r√©serves : $audio_issues issues, ${#solutions[@]} solutions propos√©es"
        return 0

    elif [ "$audio_issues" -le 4 ]; then
        echo "‚ö†Ô∏è  FICHIER PROBL√âMATIQUE ($audio_issues probl√®mes d√©tect√©s)"
        echo "   ‚Üí Transcription DIFFICILE, qualit√© D√âGRAD√âE probable"
        echo "   ‚Üí Corrections FORTEMENT recommand√©es"

        echo ""
        echo "üîß SOLUTIONS OBLIGATOIRES POUR CORRIGER :"
        for i in "${!solutions[@]}"; do
            echo "   $((i+1)). ${solutions[$i]}"
        done

        log_action "Analyse audio probl√©matique : $audio_issues probl√®mes, corrections n√©cessaires"
        return 1

    else
        echo "‚ùå FICHIER INCOMPATIBLE AVEC WHISPER ($audio_issues probl√®mes critiques)"
        echo "   ‚Üí Transcription IMPOSSIBLE en l'√©tat"
        echo "   ‚Üí Corrections OBLIGATOIRES avant utilisation"

        echo ""
        echo "üö® SOLUTIONS D'URGENCE POUR RENDRE COMPATIBLE :"
        for i in "${!solutions[@]}"; do
            echo "   $((i+1)). ${solutions[$i]}"
        done

        # Ajouter une solution universelle de dernier recours
        echo "   $((${#solutions[@]}+1)). SOLUTION UNIVERSELLE (dernier recours) :"
        echo "       ffmpeg -i '$file' -vn -acodec pcm_s16le -ar 16000 -ac 1 '$file.whisper-ready.wav'"
        echo "       Puis utilisez directement le fichier WAV avec Whisper"

        log_action "Analyse audio critique : fichier incompatible, $audio_issues probl√®mes"
        return 1
    fi
}

# Fonction --help mise √† jour
show_help() {
    cat << EOF
USAGE: $0 [--file <fichier> | --folder <r√©pertoire>] [OPTIONS]

OPTIONS PRINCIPALES:
  --file <path>       Chemin complet du fichier vid√©o √† transcrire
  --folder <path>     R√©pertoire contenant les fichiers vid√©o √† traiter en lot

OPTIONS FACULTATIVES:
  --exec              Lance la transcription (sinon simulation)
  --model <name>      Mod√®le whisper √† utiliser (d√©faut: base)
  --lang <code>       Code langue (d√©faut: fr - fran√ßais)
  --keep-audio        Conserve les fichiers WAV temporaires
  --threads <n>       Nombre de threads (d√©faut: auto)
  --output-format <f> Format de sortie (d√©faut: txt,srt,vtt)
  --analyze           Analyse la compatibilit√© audio avec solutions d√©taill√©es
  --delete            Supprime tous les fichiers g√©n√©r√©s
  --help              Affiche cette aide

MODELES DISPONIBLES:
  tiny     (39 MB)   - Le plus rapide, moins pr√©cis
  base     (142 MB)  - Bon compromis vitesse/qualit√©
  small    (244 MB)  - Meilleure qualit√© que base
  medium   (769 MB)  - Tr√®s bonne qualit√©
  large    (1550 MB) - Meilleure qualit√©
  large-v2 (1550 MB) - Version am√©lior√©e de large
  large-v3 (1550 MB) - MEILLEURE qualit√© possible (recommand√©)

EXTENSIONS VID√âO SUPPORT√âES (mode --folder):
  .mp4 .avi .mkv .mov .wmv .flv .webm .m4v .3gp .ogv .ts .mts .m2ts

LANGUES SUPPORTEES (codes ISO):
  af (afrikaans)    am (amharic)      ar (arabic)       as (assamese)
  az (azerbaijani)  ba (bashkir)      be (belarusian)   bg (bulgarian)
  bn (bengali)      bo (tibetan)      br (breton)       bs (bosnian)
  ca (catalan)      cs (czech)        cy (welsh)        da (danish)
  de (german)       el (greek)        en (english)      es (spanish)
  et (estonian)     eu (basque)       fa (persian)      fi (finnish)
  fo (faroese)      fr (french)       gl (galician)     gu (gujarati)
  ha (hausa)        haw (hawaiian)    he (hebrew)       hi (hindi)
  hr (croatian)     ht (haitian)      hu (hungarian)    hy (armenian)
  id (indonesian)   is (icelandic)    it (italian)      ja (japanese)
  jw (javanese)     ka (georgian)     kk (kazakh)       km (khmer)
  kn (kannada)      ko (korean)       la (latin)        lb (luxembourgish)
  ln (lingala)      lo (lao)          lt (lithuanian)   lv (latvian)
  mg (malagasy)     mi (maori)        mk (macedonian)   ml (malayalam)
  mn (mongolian)    mr (marathi)      ms (malay)        mt (maltese)
  my (myanmar)      ne (nepali)       nl (dutch)        nn (nynorsk)
  no (norwegian)    oc (occitan)      pa (punjabi)      pl (polish)
  ps (pashto)       pt (portuguese)   ro (romanian)     ru (russian)
  sa (sanskrit)     sd (sindhi)       si (sinhala)      sk (slovak)
  sl (slovenian)    sn (shona)        so (somali)       sq (albanian)
  sr (serbian)      su (sundanese)    sv (swedish)      sw (swahili)
  ta (tamil)        te (telugu)       tg (tajik)        th (thai)
  tk (turkmen)      tl (tagalog)      tr (turkish)      tt (tatar)
  uk (ukrainian)    ur (urdu)         uz (uzbek)        vi (vietnamese)
  yi (yiddish)      yo (yoruba)       zh (chinese)

EXEMPLES D'UTILISATION:

  # Analyser un seul fichier
  $0 --file "/home/user/video.mp4" --analyze

  # Analyser puis transcrire un fichier
  $0 --file "/home/user/video.mp4" --analyze --exec

  # Traiter tous les fichiers d'un dossier
  $0 --folder "/media/nox/data2/Videos/VOIX_suspectes/BOOST-other" --exec

  # Analyser tous les fichiers d'un dossier
  $0 --folder "/path/to/videos" --analyze

  # Transcription avec mod√®le sp√©cifique
  $0 --folder "/path/videos" --exec --model large-v3 --lang en

  # Supprimer tous les fichiers g√©n√©r√©s d'un dossier
  $0 --folder "/path/videos" --delete

DESCRIPTION:
Transcrit un ou plusieurs fichiers vid√©o en texte avec whisper.cpp.
Mode --file : traite un seul fichier
Mode --folder : traite automatiquement tous les fichiers vid√©o du r√©pertoire
Extrait l'audio en WAV 16kHz mono, puis transcrit avec le mod√®le choisi.
G√©n√®re fichiers .txt, .srt, .vtt dans le m√™me r√©pertoire que les vid√©os.

ANALYSE D√âTAILL√âE (--analyze):
- D√©tection pr√©cise des probl√®mes audio (codec, fr√©quence, canaux, d√©bit)
- Solutions concr√®tes avec commandes ffmpeg pr√™tes √† l'emploi
- Tests de conversion √† 3 positions diff√©rentes du fichier
- Diagnostic complet avec verdict de compatibilit√© Whisper

TRAITEMENT PAR LOT (--folder):
- D√©tection automatique des extensions vid√©o support√©es
- Traitement s√©quentiel de tous les fichiers compatibles
- Logs d√©taill√©s pour chaque fichier trait√©
- R√©sum√© final avec statistiques de r√©ussite/√©chec

PR√âREQUIS:
- whisper.cpp compil√© dans ./whisper.cpp/build/bin/whisper-cli
- ffmpeg install√© (avec ffprobe pour --analyze)
- bc (calculatrice) pour les calculs de positions temporelles
- Mod√®les t√©l√©charg√©s dans ./whisper.cpp/models/

EOF
}

# Fonction de traitement par lot d'un dossier
process_folder() {
    local folder="$1"
    local analyze_only="$2"
    local execute="$3"

    if [ ! -d "$folder" ]; then
        echo "‚ùå Erreur : le r√©pertoire '$folder' n'existe pas"
        return 1
    fi

    log_action "D√©but traitement dossier '$folder'"

    echo ""
    echo "=== TRAITEMENT PAR LOT DU DOSSIER ==="
    echo "R√©pertoire : $folder"
    echo ""

    # Recherche des fichiers vid√©o - m√©thode simplifi√©e et robuste
    local video_files=()
    local total_files=0

    echo "üîç Recherche des fichiers vid√©o..."
    echo "Extensions recherch√©es : ${VIDEO_EXTENSIONS[*]}"
    echo ""

    # Parcourir tous les fichiers du dossier
    for file in "$folder"/*; do
        # V√©rifier que c'est un fichier (pas un dossier)
        if [ -f "$file" ]; then
            # Extraire l'extension et la convertir en minuscules
            local filename=$(basename "$file")
            local extension="${filename##*.}"
            extension="${extension,,}" # conversion en minuscules

            # V√©rifier si l'extension est dans notre liste
            for supported_ext in "${VIDEO_EXTENSIONS[@]}"; do
                if [ "$extension" = "$supported_ext" ]; then
                    video_files+=("$file")
                    ((total_files++))
                    echo "   ‚úÖ Trouv√©: $filename (.$extension)"
                    break
                fi
            done
        fi
    done
    echo ""

    if [ "$total_files" -eq 0 ]; then
        echo "‚ùå Aucun fichier vid√©o trouv√© dans le r√©pertoire"
        echo ""
        echo "üîç DEBUG - Fichiers pr√©sents dans le dossier :"
        ls -la "$folder" | head -10
        echo ""
        echo "üîç Extensions d√©tect√©es dans le dossier :"
        for file in "$folder"/*; do
            if [ -f "$file" ]; then
                local filename=$(basename "$file")
                local ext="${filename##*.}"
                echo "   $filename -> .$ext"
            fi
        done | head -10
        echo ""
        echo "Extensions recherch√©es : ${VIDEO_EXTENSIONS[*]}"
        return 1
    fi

    echo "‚úÖ $total_files fichier(s) vid√©o d√©tect√©(s) :"
    for i in "${!video_files[@]}"; do
        local basename=$(basename "${video_files[$i]}")
        echo "   $((i+1)). $basename"
    done

    # Statistiques de traitement
    local processed=0
    local successful=0
    local failed=0
    local skipped=0
    local analysis_passed=0
    local analysis_failed=0

    echo ""
    echo "=== D√âBUT DU TRAITEMENT ==="

    for i in "${!video_files[@]}"; do
        local file="${video_files[$i]}"
        local basename=$(basename "$file")
        local file_num=$((i+1))

        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìÅ FICHIER $file_num/$total_files : $basename"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

        processed=$((processed + 1))

        # V√©rification si les fichiers de sortie existent d√©j√†
        local base_name="${file%.*}"
        local output_exists=false

        if [[ "$OUTPUT_FORMAT" == *"txt"* ]] && [ -f "${base_name}.txt" ]; then
            output_exists=true
        fi
        if [[ "$OUTPUT_FORMAT" == *"srt"* ]] && [ -f "${base_name}.srt" ]; then
            output_exists=true
        fi
        if [[ "$OUTPUT_FORMAT" == *"vtt"* ]] && [ -f "${base_name}.vtt" ]; then
            output_exists=true
        fi

        if [ "$output_exists" = true ] && [ "$execute" -eq 1 ] && [ "$analyze_only" -eq 0 ]; then
            echo "‚è≠Ô∏è  Fichiers de transcription d√©j√† pr√©sents, passage au suivant..."
            echo "   (Utilisez --delete pour supprimer les fichiers existants)"
            skipped=$((skipped + 1))
            continue
        fi

        # Phase d'analyse
        if [ "$analyze_only" -eq 1 ] || ([ "$ANALYZE" -eq 1 ] && [ "$execute" -eq 1 ]); then
            echo "üîç ANALYSE DE COMPATIBILIT√â AUDIO..."

            if analyze_audio "$file"; then
                analysis_passed=$((analysis_passed + 1))
                echo "‚úÖ Fichier compatible pour transcription Whisper"

                # Si c'est seulement une analyse, passer au suivant
                if [ "$analyze_only" -eq 1 ]; then
                    continue
                fi
            else
                analysis_failed=$((analysis_failed + 1))
                echo "‚ùå Fichier incompatible ou probl√©matique"

                # En mode analyse + exec, arr√™ter le traitement de ce fichier si analyse √©choue
                if [ "$execute" -eq 1 ]; then
                    echo "‚è≠Ô∏è  Transcription annul√©e pour ce fichier √† cause des probl√®mes d√©tect√©s"
                    failed=$((failed + 1))
                    continue
                else
                    # Mode analyse seule, continuer avec les autres fichiers
                    continue
                fi
            fi
        fi

        # Phase de transcription
        if [ "$execute" -eq 1 ] && [ "$analyze_only" -eq 0 ]; then
            echo ""
            echo "üéôÔ∏è  LANCEMENT DE LA TRANSCRIPTION..."

            if process_single_file "$file"; then
                successful=$((successful + 1))
                echo "‚úÖ Transcription r√©ussie pour : $basename"
            else
                failed=$((failed + 1))
                echo "‚ùå √âchec de la transcription pour : $basename"
            fi
        fi
    done

    # Rapport final
    echo ""
    echo "========================================"
    echo "=== RAPPORT FINAL DE TRAITEMENT ==="
    echo "========================================"
    echo "üìä Statistiques :"
    echo "   ‚Ä¢ Fichiers trait√©s : $processed/$total_files"

    if [ "$analyze_only" -eq 1 ] || [ "$ANALYZE" -eq 1 ]; then
        echo "   ‚Ä¢ Analyses r√©ussies : $analysis_passed"
        echo "   ‚Ä¢ Analyses √©chou√©es : $analysis_failed"
    fi

    if [ "$execute" -eq 1 ] && [ "$analyze_only" -eq 0 ]; then
        echo "   ‚Ä¢ Transcriptions r√©ussies : $successful"
        echo "   ‚Ä¢ Transcriptions √©chou√©es : $failed"
        echo "   ‚Ä¢ Fichiers ignor√©s (d√©j√† trait√©s) : $skipped"

        local success_rate=0
        if [ "$processed" -gt 0 ]; then
            success_rate=$(( (successful * 100) / processed ))
        fi
        echo "   ‚Ä¢ Taux de r√©ussite : ${success_rate}%"
    fi

    echo ""
    if [ "$successful" -gt 0 ] || [ "$analysis_passed" -gt 0 ]; then
        echo "‚úÖ Traitement du dossier termin√© avec succ√®s"
    elif [ "$failed" -gt 0 ] || [ "$analysis_failed" -gt 0 ]; then
        echo "‚ö†Ô∏è  Traitement termin√© avec des erreurs"
    else
        echo "‚ÑπÔ∏è  Aucun fichier n'a n√©cessit√© de traitement"
    fi

    log_action "Traitement dossier termin√©: $successful r√©ussies, $failed √©chou√©es sur $total_files fichiers"

    return 0
}

# Fonction de traitement d'un seul fichier (extraite pour r√©utilisation)
process_single_file() {
    local file="$1"
    local base_name="${file%.*}"
    local audio_wav="${base_name}.wav"

    # Extraction audio
    echo "1. Extraction audio en WAV 16kHz mono..."
    if ! ffmpeg -y -i "$file" -vn -acodec pcm_s16le -ar 16000 -ac 1 "$audio_wav" >/dev/null 2>&1; then
        echo "‚ùå Erreur lors de l'extraction audio"
        return 1
    fi
    log_action "Extraction audio vers '$audio_wav'"

    # Transcription
    echo "2. Transcription avec whisper.cpp (mod√®le: $MODEL, langue: $LANG)..."

    # Construction commande whisper avec quotes pour gestion espaces
    local whisper_cmd="\"$WHISPER_BIN\" -m \"$MODEL_FILE\" -f \"$audio_wav\" -l $LANG --suppress-nst"

    # Ajout options de sortie selon OUTPUT_FORMAT
    if [[ "$OUTPUT_FORMAT" == *"txt"* ]]; then
        whisper_cmd="$whisper_cmd -otxt"
    fi
    if [[ "$OUTPUT_FORMAT" == *"srt"* ]]; then
        whisper_cmd="$whisper_cmd -osrt"
    fi
    if [[ "$OUTPUT_FORMAT" == *"vtt"* ]]; then
        whisper_cmd="$whisper_cmd -ovtt"
    fi

    # Ajout threads si sp√©cifi√©
    if [ -n "$THREADS" ]; then
        whisper_cmd="$whisper_cmd -t $THREADS"
    fi

    # Ex√©cution avec eval pour g√©rer les quotes
    if ! eval $whisper_cmd >/dev/null 2>&1; then
        echo "‚ùå Erreur lors de la transcription Whisper"
        rm -f "$audio_wav" 2>/dev/null
        return 1
    fi

    log_action "Transcription termin√©e avec mod√®le $MODEL, langue $LANG"

    # Nettoyage audio temporaire
    if [ "$KEEP_AUDIO" -eq 0 ]; then
        echo "3. Suppression fichier audio temporaire..."
        rm -f "$audio_wav"
        log_action "Suppression audio temporaire '$audio_wav'"
    else
        echo "3. Conservation fichier audio (--keep-audio)"
        log_action "Conservation audio '$audio_wav'"
    fi

    return 0
}

# Fonction de suppression mise √† jour pour supporter les dossiers
delete_files() {
    local target="$1"

    if [ -f "$target" ]; then
        # Mode fichier unique
        local base_name="${target%.*}"
        log_action "D√©but suppression fichiers g√©n√©r√©s pour $target"

        local files_to_delete=(
            "${base_name}.txt"
            "${base_name}.srt"
            "${base_name}.vtt"
            "${base_name}.wav"
        )

        local deleted_count=0
        for f in "${files_to_delete[@]}"; do
            if [ -f "$f" ]; then
                rm -f "$f"
                log_action "Suppression $f"
                deleted_count=$((deleted_count + 1))
            fi
        done

        echo "‚úÖ Suppression termin√©e : $deleted_count fichier(s) supprim√©(s)"

    elif [ -d "$target" ]; then
        # Mode dossier
        log_action "D√©but suppression fichiers g√©n√©r√©s dans dossier $target"

        echo "üóëÔ∏è  Suppression des fichiers g√©n√©r√©s dans : $target"
        echo ""

        local deleted_count=0
        local extensions=("txt" "srt" "vtt" "wav")

        for ext in "${extensions[@]}"; do
            local count=0
            while IFS= read -r -d '' file; do
                if [ -f "$file" ]; then
                    # V√©rifier si le fichier correspond √† une vid√©o source
                    local base_name="${file%.*}"
                    local has_video_source=false

                    for video_ext in "${VIDEO_EXTENSIONS[@]}"; do
                        if [ -f "${base_name}.${video_ext}" ]; then
                            has_video_source=true
                            break
                        fi
                    done

                    if [ "$has_video_source" = true ]; then
                        rm -f "$file"
                        echo "   Supprim√©: $(basename "$file")"
                        count=$((count + 1))
                        deleted_count=$((deleted_count + 1))
                        log_action "Suppression $file"
                    fi
                fi
            done < <(find "$target" -maxdepth 1 -type f -name "*.${ext}" -print0 2>/dev/null)

            if [ "$count" -gt 0 ]; then
                echo "     ‚Üí $count fichier(s) .$ext supprim√©(s)"
            fi
        done

        echo ""
        echo "‚úÖ Suppression termin√©e : $deleted_count fichier(s) supprim√©(s) au total"

    else
        echo "‚ùå Erreur : '$target' n'est ni un fichier ni un r√©pertoire"
        return 1
    fi

    show_actions
    exit 0
}

# Parse arguments mis √† jour
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

FILE=""
FOLDER=""
EXECUTE=0
ANALYZE=0
MODEL="base"
LANG="fr"
KEEP_AUDIO=0
THREADS=""
OUTPUT_FORMAT="txt,srt,vtt"

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --file) FILE="$2"; shift 2 ;;
        --folder) FOLDER="$2"; shift 2 ;;
        --exec) EXECUTE=1; shift ;;
        --analyze) ANALYZE=1; shift ;;
        --model) MODEL="$2"; shift 2 ;;
        --lang) LANG="$2"; shift 2 ;;
        --keep-audio) KEEP_AUDIO=1; shift ;;
        --threads) THREADS="$2"; shift 2 ;;
        --output-format) OUTPUT_FORMAT="$2"; shift 2 ;;
        --delete)
            if [ -n "$FILE" ]; then
                delete_files "$FILE"
            elif [ -n "$FOLDER" ]; then
                delete_files "$FOLDER"
            else
                echo "‚ùå Erreur : --file ou --folder requis avec --delete"
                exit 1
            fi
            ;;
        --help) show_help; exit 0 ;;
        *) echo "‚ùå Argument inconnu: $1"; show_help; exit 1 ;;
    esac
done

# V√©rifications des arguments
if [ -z "$FILE" ] && [ -z "$FOLDER" ]; then
    echo "‚ùå Erreur : --file ou --folder obligatoire"
    show_help
    exit 1
fi

if [ -n "$FILE" ] && [ -n "$FOLDER" ]; then
    echo "‚ùå Erreur : --file et --folder sont mutuellement exclusifs"
    show_help
    exit 1
fi

# V√©rification existence fichier/dossier
if [ -n "$FILE" ] && [ ! -f "$FILE" ]; then
    echo "‚ùå Erreur : fichier '$FILE' introuvable"
    exit 1
fi

if [ -n "$FOLDER" ] && [ ! -d "$FOLDER" ]; then
    echo "‚ùå Erreur : r√©pertoire '$FOLDER' introuvable"
    exit 1
fi

# Mode dossier
if [ -n "$FOLDER" ]; then
    if [ "$ANALYZE" -eq 1 ] && [ "$EXECUTE" -eq 0 ]; then
        # Mode analyse seule du dossier
        process_folder "$FOLDER" 1 0
    elif [ "$ANALYZE" -eq 1 ] && [ "$EXECUTE" -eq 1 ]; then
        # Mode analyse + transcription du dossier
        process_folder "$FOLDER" 0 1
    elif [ "$EXECUTE" -eq 1 ]; then
        # Mode transcription seule du dossier
        process_folder "$FOLDER" 0 1
    else
        # Mode simulation
        echo "‚ÑπÔ∏è  Mode simulation pour le dossier : $FOLDER"
        echo "Ajoutez --exec pour lancer le traitement r√©el"
        echo "Ajoutez --analyze pour analyser les fichiers audio"
        process_folder "$FOLDER" 1 0
    fi
    exit 0
fi

# Mode fichier unique (code existant adapt√©)
# Analyse audio si demand√©e
if [ "$ANALYZE" -eq 1 ]; then
    if ! analyze_audio "$FILE"; then
        echo ""
        echo "‚ùå ANALYSE AUDIO √âCHOU√âE"
        if [ "$EXECUTE" -eq 1 ]; then
            echo "Transcription annul√©e √† cause des probl√®mes audio d√©tect√©s."
            echo "Utilisez --exec sans --analyze pour forcer la transcription."
            exit 1
        else
            echo "Utilisez --exec pour tenter la transcription malgr√© les probl√®mes."
            exit 1
        fi
    else
        echo ""
        echo "‚úÖ ANALYSE AUDIO R√âUSSIE"
        if [ "$EXECUTE" -eq 0 ]; then
            echo "Fichier compatible. Ajoutez --exec pour lancer la transcription."
            exit 0
        fi
        echo "Lancement de la transcription..."
    fi
fi

# V√©rification pr√©requis pour transcription
command -v ffmpeg >/dev/null 2>&1 || { echo "‚ùå Erreur : ffmpeg requis"; exit 1; }

if [ ! -x "$WHISPER_BIN" ]; then
    echo "‚ùå Erreur : binaire whisper-cli introuvable ($WHISPER_BIN)"
    echo "Lancez d'abord install_whisper.sh"
    exit 1
fi

# V√©rification mod√®le
MODEL_FILE="$MODELS_DIR/ggml-${MODEL}.bin"
if [ ! -f "$MODEL_FILE" ]; then
    echo "‚ùå Erreur : mod√®le '$MODEL_FILE' introuvable"
    echo "Mod√®les disponibles dans $MODELS_DIR :"
    ls -1 "$MODELS_DIR"/*.bin 2>/dev/null || echo "Aucun mod√®le trouv√©"
    exit 1
fi

log_action "D√©but transcription fichier '$FILE' avec mod√®le $MODEL, langue $LANG"

if [ "$EXECUTE" -eq 0 ]; then
    echo "‚ÑπÔ∏è  Option --exec non fournie, simulation uniquement."
    echo "Commande qui serait ex√©cut√©e :"
    echo "\"$WHISPER_BIN\" -m \"$MODEL_FILE\" -f \"<audio.wav>\" -l $LANG -otxt -osrt -ovtt"
    if [ -n "$THREADS" ]; then
        echo "  avec $THREADS threads"
    fi
    exit 0
fi

# Traitement du fichier unique
if process_single_file "$FILE"; then
    # Variables fichiers pour affichage final
    BASE_NAME="${FILE%.*}"

    echo ""
    echo "=== TRANSCRIPTION TERMINEE ==="
    echo "Fichiers g√©n√©r√©s :"
    if [[ "$OUTPUT_FORMAT" == *"txt"* ]]; then
        echo "  - Texte : ${BASE_NAME}.txt"
    fi
    if [[ "$OUTPUT_FORMAT" == *"srt"* ]]; then
        echo "  - Sous-titres SRT : ${BASE_NAME}.srt"
    fi
    if [[ "$OUTPUT_FORMAT" == *"vtt"* ]]; then
        echo "  - Sous-titres VTT : ${BASE_NAME}.vtt"
    fi
    if [ "$KEEP_AUDIO" -eq 1 ]; then
        echo "  - Audio WAV : ${BASE_NAME}.wav"
    fi

    echo ""
    echo "Param√®tres utilis√©s :"
    echo "  - Mod√®le : $MODEL"
    echo "  - Langue : $LANG"
    echo "  - Threads : ${THREADS:-auto}"
    echo "  - Formats : $OUTPUT_FORMAT"

    show_actions
    log_action "Transcription compl√®te termin√©e avec succ√®s"
    exit 0
else
    echo "‚ùå √âchec de la transcription"
    show_actions
    log_action "√âchec de la transcription"
    exit 1
fi
