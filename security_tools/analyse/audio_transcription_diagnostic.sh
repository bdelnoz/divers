#!/bin/bash

#########################################################################
# Script: audio_transcription_diagnostic.sh
# Auteur: Bruno DELNOZ
# Email: bruno.delnoz@protonmail.com
# Target usage: Diagnostic ultra-complet des probl√®mes de transcription vocale pollu√©e
# Version: v1.0 - Date: 2025-01-10
#
# Changelog:
# v1.0 - 2025-01-10 - Version initiale ultra-compl√®te
#   - Diagnostic mat√©riel et processus syst√®me complet
#   - Analyse automatique avec rapport structur√©
#   - Tests d'enregistrement et transcription Whisper
#   - D√©tection processus suspects et filtres audio
#   - G√©n√©ration logs d√©taill√©s et recommandations
#   - Support --help, --exec, --delete avec exemples
#########################################################################

# Variables globales - Configuration du script et environnement
SCRIPT_NAME="audio_transcription_diagnostic"
SCRIPT_VERSION="v1.0"
SCRIPT_DATE="2025-01-10"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
WORKDIR="${SCRIPT_NAME}_${TIMESTAMP}"
LOG_FILE="log.${SCRIPT_NAME}.${SCRIPT_VERSION}.log"
ANALYSIS_FILE="$WORKDIR/analysis_report.txt"
BACKUP_DIR="${SCRIPT_NAME}_backups"

# Couleurs pour affichage terminal - Am√©liore lisibilit√© output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Compteurs pour rapport final - Tracking actions effectu√©es
ACTION_COUNTER=0
ACTIONS_LIST=()

#########################################################################
# FONCTIONS UTILITAIRES - Gestion logs, affichage, et analyse
#########################################################################

# Fonction log centralis√©e - √âcrit dans fichier ET affiche terminal
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[$timestamp] $message" >> "$LOG_FILE"
    echo -e "$message"
}

# Fonction ajout action - Track toutes les actions pour rapport final
add_action() {
    ACTION_COUNTER=$((ACTION_COUNTER + 1))
    ACTIONS_LIST+=("$ACTION_COUNTER. $1")
    log "${BLUE}[ACTION $ACTION_COUNTER] $1${NC}"
}

# Fonction analyse r√©sultats - Cat√©gorise les r√©sultats pour rapport
analyze() {
    local category="$1"
    local result="$2"
    local status="$3"
    echo "$category|$result|$status" >> "$WORKDIR/raw_analysis.csv"
    log "${CYAN}[ANALYSE] $category: $result [$status]${NC}"
}

# Fonction backup config - Sauvegarde configs avant modifications
backup_config() {
    local file_to_backup="$1"
    local backup_name="$2"

    if [ -f "$file_to_backup" ]; then
        mkdir -p "$BACKUP_DIR"
        cp "$file_to_backup" "$BACKUP_DIR/${backup_name}_${TIMESTAMP}.bak"
        add_action "Sauvegarde de $file_to_backup vers $BACKUP_DIR"
        return 0
    fi
    return 1
}

# Fonction v√©rification pr√©requis - Check outils n√©cessaires avant exec
check_prerequisites() {
    local missing_tools=()
    local required_tools=("arecord" "aplay" "pactl" "lsmod" "journalctl" "lsusb")

    add_action "V√©rification des pr√©requis syst√®me"

    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
            log "${RED}‚ùå Outil manquant: $tool${NC}"
        else
            log "${GREEN}‚úÖ Outil disponible: $tool${NC}"
        fi
    done

    if [ ${#missing_tools[@]} -ne 0 ]; then
        log "${RED}ERREUR: Outils manquants: ${missing_tools[*]}${NC}"
        log "${YELLOW}Installation sugg√©r√©e: sudo apt-get install alsa-utils pulseaudio-utils${NC}"
        analyze "Pr√©requis" "Outils manquants: ${missing_tools[*]}" "CRITIQUE"
        return 1
    fi

    analyze "Pr√©requis" "Tous les outils n√©cessaires sont disponibles" "OK"
    return 0
}

#########################################################################
# FONCTION HELP - Documentation compl√®te avec exemples d√©taill√©s
#########################################################################
show_help() {
    cat << 'EOF'
========================================================================
üéôÔ∏è AUDIO TRANSCRIPTION DIAGNOSTIC v1.0
========================================================================
Auteur: Bruno DELNOZ <bruno.delnoz@protonmail.com>

DESCRIPTION:
    Script ultra-complet pour diagnostiquer les probl√®mes de transcription
    vocale pollu√©e. Analyse le syst√®me, les processus, la configuration
    audio et g√©n√®re un rapport d√©taill√© avec recommandations.

USAGE:
    ./audio_transcription_diagnostic.sh [OPTIONS]

OPTIONS:
    --exec          Lance le diagnostic complet
    --delete        Supprime tous les fichiers cr√©√©s par le script
    --help          Affiche cette aide

EXEMPLES D'UTILISATION:

1. Diagnostic complet (recommand√©):
   ./audio_transcription_diagnostic.sh --exec

   ‚Üí Lance l'analyse compl√®te avec test micro, scan processus,
     analyse logs syst√®me, g√©n√©ration rapport final

2. Nettoyage complet:
   ./audio_transcription_diagnostic.sh --delete

   ‚Üí Supprime tous les dossiers de diagnostic cr√©√©s pr√©c√©demment
   ‚Üí Supprime les logs et backups
   ‚Üí Restore les configurations sauvegard√©es

3. Affichage aide:
   ./audio_transcription_diagnostic.sh --help
   ./audio_transcription_diagnostic.sh

   ‚Üí Affiche cette documentation compl√®te

SORTIE DU SCRIPT:
    - Dossier audio_transcription_diagnostic_YYYYMMDD_HHMMSS/
      ‚îú‚îÄ‚îÄ analysis_report.txt (rapport final avec recommandations)
      ‚îú‚îÄ‚îÄ test_micro.wav (enregistrement test)
      ‚îú‚îÄ‚îÄ whisper_result.txt (transcription Whisper si disponible)
      ‚îú‚îÄ‚îÄ processes_audio.log (processus audio actifs)
      ‚îú‚îÄ‚îÄ sources.log (sources audio syst√®me)
      ‚îú‚îÄ‚îÄ modules.log (modules PulseAudio/PipeWire)
      ‚îú‚îÄ‚îÄ system_logs.log (logs syst√®me audio)
      ‚îú‚îÄ‚îÄ kernel_modules.log (modules kernel audio)
      ‚îî‚îÄ‚îÄ raw_analysis.csv (donn√©es brutes analyse)

    - log.audio_transcription_diagnostic.v1.0.log (log complet ex√©cution)
    - audio_transcription_diagnostic_backups/ (sauvegardes configs)

PROBL√àMES D√âTECT√âS AUTOMATIQUEMENT:
    üö® CRITIQUES:
    - Enregistrement audio impossible ou corrompu
    - Absence totale de processus audio syst√®me
    - Erreurs kernel/driver audio critiques
    - Permissions syst√®me insuffisantes

    üîç SUSPECTS:
    - NoiseTorch ou filtres audio actifs
    - Modules PulseAudio loopback/echo-cancel
    - Processus de capture audio inconnus
    - Conflits entre serveurs audio (JACK/Pulse)

    ‚ö†Ô∏è ATTENTION:
    - Utilisateur pas dans groupe audio
    - Multiples cartes son d√©tect√©es
    - Connexions r√©seau suspectes
    - Configuration audio personnalis√©e

EXEMPLES DE CAS D'USAGE TYPIQUES:

Cas 1 - Transcription pollu√©e sur multiple plateformes:
    ./audio_transcription_diagnostic.sh --exec
    ‚Üí Analyse si le probl√®me vient du syst√®me ou des services

Cas 2 - Apr√®s installation nouveaux drivers audio:
    ./audio_transcription_diagnostic.sh --exec
    ‚Üí V√©rifie conflits et configuration post-installation

Cas 3 - Probl√®me apparu apr√®s mise √† jour syst√®me:
    ./audio_transcription_diagnostic.sh --exec
    ‚Üí Compare configuration actuelle vs logs pr√©c√©dents

Cas 4 - Nettoyage apr√®s r√©solution probl√®me:
    ./audio_transcription_diagnostic.sh --delete
    ‚Üí Supprime tous les fichiers de diagnostic

INTERPR√âTATION DU RAPPORT:

    STATUS OK: √âl√©ment fonctionne normalement
    STATUS INFO: Information utile mais pas probl√©matique
    STATUS ATTENTION: √âl√©ment √† surveiller, peut causer probl√®mes
    STATUS SUSPECT: √âl√©ment probablement responsable du probl√®me
    STATUS CRITIQUE: √âl√©ment d√©faillant, action imm√©diate requise

RECOMMANDATIONS POST-DIAGNOSTIC:

    1. Consulter analysis_report.txt pour actions prioritaires
    2. Suivre recommendations automatiques g√©n√©r√©es
    3. Tester avec fichier test_micro.wav si probl√®me persiste
    4. Relancer diagnostic apr√®s corrections pour v√©rifier

COMPATIBILIT√â:
    - Test√© sur Kali Linux, Ubuntu, Debian, Fedora
    - N√©cessite bash 4.0+, alsa-utils, pulseaudio-utils
    - Supporte PulseAudio, PipeWire, JACK
    - Compatible syst√®mes systemd et SysV

AUTEUR & SUPPORT:
    Bruno DELNOZ - bruno.delnoz@protonmail.com
    Version v1.0 - 2025-01-10
========================================================================
EOF
}

#########################################################################
# FONCTIONS DIAGNOSTIC - Modules d'analyse syst√®me complets
#########################################################################

# Test mat√©riel et enregistrement - V√©rifie hardware et qualit√© signal
test_hardware_recording() {
    add_action "D√©marrage test mat√©riel et enregistrement audio"

    log "${PURPLE}========================================="
    log "1Ô∏è‚É£  TEST MAT√âRIEL ET ENREGISTREMENT"
    log "=========================================${NC}"

    # Test d'enregistrement avec analyse d√©taill√©e
    log "${YELLOW}‚è∞ Test d'enregistrement micro (10 secondes)...${NC}"
    log "Parle maintenant: 'Bonjour je teste mon micro un deux trois'"

    # Enregistrement avec gestion d'erreurs compl√®te
    if arecord -f cd -t wav -d 10 "$WORKDIR/test_micro.wav" 2>&1 | tee "$WORKDIR/arecord.log"; then
        add_action "Enregistrement audio effectu√© avec succ√®s"

        # Analyse du fichier audio cr√©√©
        if [ -f "$WORKDIR/test_micro.wav" ]; then
            file_size=$(stat -c%s "$WORKDIR/test_micro.wav")
            if [ $file_size -gt 1000 ]; then
                log "${GREEN}‚úÖ Fichier audio cr√©√© ($file_size bytes)${NC}"
                analyze "Enregistrement" "Fichier cr√©√© - $file_size bytes" "OK"

                # Test de lecture avec v√©rification erreurs
                log "${YELLOW}üîä Test de lecture du fichier...${NC}"
                if aplay "$WORKDIR/test_micro.wav" 2>&1 | tee "$WORKDIR/aplay.log"; then
                    analyze "Lecture" "Fichier lu sans erreur" "OK"
                    add_action "Test lecture audio r√©ussi"
                else
                    analyze "Lecture" "Erreur lors de la lecture" "CRITIQUE"
                fi

                # Analyse spectrale avanc√©e si sox disponible
                if command -v sox &> /dev/null; then
                    add_action "Analyse spectrale avanc√©e avec sox"
                    sox "$WORKDIR/test_micro.wav" -n stat 2>&1 | tee "$WORKDIR/sox_analysis.log"
                    analyze "Analyse_spectrale" "Disponible via sox" "INFO"

                    # Extraction donn√©es techniques audio
                    duration=$(sox --i -D "$WORKDIR/test_micro.wav" 2>/dev/null)
                    sample_rate=$(sox --i -r "$WORKDIR/test_micro.wav" 2>/dev/null)
                    channels=$(sox --i -c "$WORKDIR/test_micro.wav" 2>/dev/null)

                    analyze "Dur√©e_audio" "${duration}s" "INFO"
                    analyze "Sample_rate" "${sample_rate}Hz" "INFO"
                    analyze "Canaux" "$channels" "INFO"
                fi

                # Test de qualit√© audio avec ffmpeg si disponible
                if command -v ffmpeg &> /dev/null; then
                    add_action "Analyse qualit√© audio avec ffmpeg"
                    ffmpeg -i "$WORKDIR/test_micro.wav" -af "volumedetect" -f null /dev/null 2>&1 | tee "$WORKDIR/ffmpeg_analysis.log"
                    analyze "Analyse_ffmpeg" "Analyse qualit√© effectu√©e" "INFO"
                fi

            else
                log "${RED}‚ùå Fichier audio trop petit ou corrompu${NC}"
                analyze "Enregistrement" "Fichier corrompu - $file_size bytes" "CRITIQUE"
            fi
        else
            log "${RED}‚ùå Fichier audio non cr√©√©${NC}"
            analyze "Enregistrement" "√âchec cr√©ation fichier" "CRITIQUE"
        fi
    else
        log "${RED}‚ùå √âchec enregistrement audio${NC}"
        analyze "Enregistrement" "Impossible d'enregistrer" "CRITIQUE"
    fi
}

# Analyse processus syst√®me - D√©tecte processus audio suspects/conflictuels
analyze_system_processes() {
    add_action "Analyse des processus syst√®me audio"

    log "${PURPLE}========================================="
    log "2Ô∏è‚É£  ANALYSE PROCESSUS SYST√àME"
    log "=========================================${NC}"

    # Processus audio principaux avec analyse d√©taill√©e
    log "${YELLOW}--- Processus audio actifs ---${NC}"
    audio_processes=$(ps aux | grep -Ei 'pulse|pipewire|jack|noisetorch|cadmus|noise|alsa' | grep -v grep)

    if [ -n "$audio_processes" ]; then
        echo "$audio_processes" | tee "$WORKDIR/processes_audio.log"
        process_count=$(echo "$audio_processes" | wc -l)
        analyze "Processus_audio" "$process_count processus d√©tect√©s" "INFO"
        add_action "D√©tection de $process_count processus audio actifs"

        # Analyse d√©taill√©e par type de processus
        if echo "$audio_processes" | grep -q pipewire; then
            pipewire_count=$(echo "$audio_processes" | grep -c pipewire)
            analyze "PipeWire" "$pipewire_count processus actifs" "INFO"
            log "${CYAN}  ‚Üí PipeWire d√©tect√© ($pipewire_count processus)${NC}"
        fi

        if echo "$audio_processes" | grep -q pulse; then
            pulse_count=$(echo "$audio_processes" | grep -c pulse)
            analyze "PulseAudio" "$pulse_count processus actifs" "INFO"
            log "${CYAN}  ‚Üí PulseAudio d√©tect√© ($pulse_count processus)${NC}"
        fi

        if echo "$audio_processes" | grep -q jack; then
            jack_count=$(echo "$audio_processes" | grep -c jack)
            analyze "JACK" "$jack_count processus actifs - Conflit possible" "ATTENTION"
            log "${YELLOW}  ‚Üí JACK d√©tect√© ($jack_count processus) - Possible conflit${NC}"
        fi

        if echo "$audio_processes" | grep -qi noisetorch; then
            analyze "NoiseTorch" "Filtre audio actif d√©tect√©" "SUSPECT"
            log "${RED}  ‚Üí NoiseTorch d√©tect√© - FILTRE AUDIO SUSPECT${NC}"
        fi

        if echo "$audio_processes" | grep -qi cadmus; then
            analyze "Cadmus" "Modulateur vocal d√©tect√©" "SUSPECT"
            log "${RED}  ‚Üí Cadmus d√©tect√© - MODULATEUR VOCAL SUSPECT${NC}"
        fi

    else
        log "${RED}Aucun processus audio standard d√©tect√©${NC}"
        analyze "Processus_audio" "Aucun processus standard" "CRITIQUE"
    fi

    # Recherche processus suspects suppl√©mentaires
    log "${YELLOW}--- Processus suspects potentiels ---${NC}"
    suspect_processes=$(ps aux | grep -Ei 'record|capture|stream|voice|speech|micro|sound|filter|transcri' | grep -v grep)

    if [ -n "$suspect_processes" ]; then
        echo "$suspect_processes" | tee "$WORKDIR/processes_suspects.log"
        suspect_count=$(echo "$suspect_processes" | wc -l)
        analyze "Processus_suspects" "$suspect_count processus trouv√©s" "ATTENTION"
        add_action "D√©tection de $suspect_count processus suspects"

        # Analyse d√©taill√©e des processus suspects
        while IFS= read -r line; do
            if echo "$line" | grep -qi "record"; then
                log "${YELLOW}  ‚Üí Processus d'enregistrement d√©tect√©: $(echo "$line" | awk '{print $11}')"
            fi
            if echo "$line" | grep -qi "capture"; then
                log "${YELLOW}  ‚Üí Processus de capture d√©tect√©: $(echo "$line" | awk '{print $11}')"
            fi
            if echo "$line" | grep -qi "transcri"; then
                log "${RED}  ‚Üí Processus de transcription d√©tect√©: $(echo "$line" | awk '{print $11}') - SUSPECT${NC}"
            fi
        done <<< "$suspect_processes"
    else
        analyze "Processus_suspects" "Aucun processus suspect" "OK"
    fi

    # Analyse des connexions de processus vers devices audio
    log "${YELLOW}--- Processus utilisant devices audio ---${NC}"
    if command -v fuser &> /dev/null; then
        audio_users=$(fuser -v /dev/snd/* 2>&1 | grep -v "Cannot stat")
        if [ -n "$audio_users" ]; then
            echo "$audio_users" | tee "$WORKDIR/audio_device_users.log"
            analyze "Devices_audio_usage" "Processus utilisant /dev/snd d√©tect√©s" "INFO"
            add_action "Analyse utilisation devices /dev/snd"
        fi
    fi
}

# Configuration audio syst√®me - Analyse sources, modules, connexions
analyze_audio_configuration() {
    add_action "Analyse configuration audio syst√®me"

    log "${PURPLE}========================================="
    log "3Ô∏è‚É£  CONFIGURATION AUDIO SYST√àME"
    log "=========================================${NC}"

    # Sources audio avec analyse approfondie
    log "${YELLOW}--- Sources audio ---${NC}"
    if pactl list sources short 2>&1 | tee "$WORKDIR/sources.log"; then
        source_count=$(pactl list sources short 2>/dev/null | wc -l)
        analyze "Sources_audio" "$source_count sources d√©tect√©es" "INFO"
        add_action "√ânum√©ration de $source_count sources audio"

        # Analyse d√©taill√©e des sources
        pactl list sources 2>&1 | tee "$WORKDIR/sources_detailed.log"

        # D√©tection sources virtuelles ou filtr√©es
        virtual_sources=$(pactl list sources 2>/dev/null | grep -c "monitor")
        if [ $virtual_sources -gt 0 ]; then
            analyze "Sources_virtuelles" "$virtual_sources sources monitor d√©tect√©es" "INFO"
        fi

    else
        analyze "Sources_audio" "Impossible de lister les sources" "CRITIQUE"
    fi

    # Connexions actives des sources - D√©tection flux suspects
    log "${YELLOW}--- Connexions source actives ---${NC}"
    if pactl list source-outputs 2>&1 | tee "$WORKDIR/source-outputs.log"; then
        output_count=$(pactl list source-outputs 2>/dev/null | grep -c "Source Output")
        if [ $output_count -gt 0 ]; then
            analyze "Connexions_actives" "$output_count connexions actives" "INFO"
            add_action "D√©tection de $output_count connexions source actives"

            # Analyse des applications connect√©es
            connected_apps=$(pactl list source-outputs 2>/dev/null | grep "application.name" | cut -d'"' -f2)
            if [ -n "$connected_apps" ]; then
                log "${CYAN}Applications connect√©es aux sources:${NC}"
                echo "$connected_apps" | while read -r app; do
                    log "${CYAN}  ‚Üí $app${NC}"
                done
                echo "$connected_apps" > "$WORKDIR/connected_apps.log"
            fi
        else
            analyze "Connexions_actives" "Aucune connexion active" "OK"
        fi
    else
        analyze "Connexions_actives" "Impossible de lister les connexions" "ATTENTION"
    fi

    # Modules charg√©s avec analyse de s√©curit√©
    log "${YELLOW}--- Modules PulseAudio/PipeWire ---${NC}"
    if pactl list modules short 2>&1 | tee "$WORKDIR/modules.log"; then
        module_count=$(pactl list modules short 2>/dev/null | wc -l)
        analyze "Modules_total" "$module_count modules charg√©s" "INFO"
        add_action "Analyse de $module_count modules audio"

        # Analyse modules suspects/probl√©matiques
        if pactl list modules short 2>/dev/null | grep -q "module-loopback"; then
            loopback_count=$(pactl list modules short 2>/dev/null | grep -c "module-loopback")
            analyze "Module_loopback" "$loopback_count modules - Peut causer √©chos/boucles" "SUSPECT"
            log "${RED}  ‚Üí module-loopback d√©tect√© ($loopback_count) - SUSPECT${NC}"
        fi

        if pactl list modules short 2>/dev/null | grep -q "module-echo-cancel"; then
            echo_cancel_count=$(pactl list modules short 2>/dev/null | grep -c "module-echo-cancel")
            analyze "Module_echo_cancel" "$echo_cancel_count modules - Filtre audio actif" "ATTENTION"
            log "${YELLOW}  ‚Üí module-echo-cancel d√©tect√© ($echo_cancel_count)${NC}"
        fi

        if pactl list modules short 2>/dev/null | grep -q "module-filter"; then
            filter_count=$(pactl list modules short 2>/dev/null | grep -c "module-filter")
            analyze "Module_filter" "$filter_count modules - Filtrage audio d√©tect√©" "SUSPECT"
            log "${RED}  ‚Üí module-filter d√©tect√© ($filter_count) - FILTRAGE SUSPECT${NC}"
        fi

        if pactl list modules short 2>/dev/null | grep -q "module-remap"; then
            remap_count=$(pactl list modules short 2>/dev/null | grep -c "module-remap")
            analyze "Module_remap" "$remap_count modules - Remapping audio" "ATTENTION"
            log "${YELLOW}  ‚Üí module-remap d√©tect√© ($remap_count)${NC}"
        fi

        # Sauvegarde configuration modules pour analyse
        pactl list modules 2>&1 | tee "$WORKDIR/modules_detailed.log"

    else
        analyze "Modules_audio" "Impossible de lister les modules" "CRITIQUE"
    fi

    # Information serveur audio principal
    log "${YELLOW}--- Configuration serveur audio ---${NC}"
    if pactl info 2>&1 | tee "$WORKDIR/server_info.log"; then
        server_name=$(pactl info 2>/dev/null | grep "Server Name" | cut -d':' -f2 | xargs)
        server_version=$(pactl info 2>/dev/null | grep "Server Version" | cut -d':' -f2 | xargs)
        analyze "Serveur_audio" "$server_name $server_version" "INFO"
        add_action "Identification serveur audio: $server_name $server_version"
    fi
}

# Analyse mat√©riel et drivers - Hardware, kernel modules, p√©riph√©riques
analyze_hardware_drivers() {
    add_action "Analyse mat√©riel et drivers audio"

    log "${PURPLE}========================================="
    log "4Ô∏è‚É£  MAT√âRIEL ET DRIVERS"
    log "=========================================${NC}"

    # Cartes son d√©tect√©es avec analyse compl√®te
    log "${YELLOW}--- Cartes son d√©tect√©es ---${NC}"
    if cat /proc/asound/cards | tee "$WORKDIR/cards.log"; then
        card_count=$(cat /proc/asound/cards | grep -c "^[[:space:]]*[0-9]")
        analyze "Cartes_son" "$card_count cartes d√©tect√©es" "INFO"
        add_action "D√©tection de $card_count cartes son"

        # Analyse d√©taill√©e par carte
        card_info=$(cat /proc/asound/cards)
        if [ $card_count -gt 1 ]; then
            analyze "Multi_cartes" "Multiples cartes - Possible conflit" "ATTENTION"
            log "${YELLOW}  ‚Üí Attention: Multiples cartes d√©tect√©es, possible conflit${NC}"
        fi

        # Information sur la carte par d√©faut
        default_card=$(cat /proc/asound/card*/id 2>/dev/null | head -1)
        if [ -n "$default_card" ]; then
            analyze "Carte_defaut" "$default_card" "INFO"
        fi
    else
        analyze "Cartes_son" "Impossible de lire /proc/asound/cards" "CRITIQUE"
    fi

    # Modules kernel audio avec v√©rification int√©grit√©
    log "${YELLOW}--- Modules kernel audio ---${NC}"
    if lsmod | grep snd | tee "$WORKDIR/kernel_modules.log"; then
        kernel_mod_count=$(lsmod | grep -c snd)
        analyze "Modules_kernel" "$kernel_mod_count modules charg√©s" "INFO"
        add_action "√ânum√©ration de $kernel_mod_count modules kernel audio"

        # V√©rification modules critiques
        critical_modules=("snd_hda_intel" "snd_usb_audio" "snd_pcm" "snd_mixer_oss")
        for module in "${critical_modules[@]}"; do
            if lsmod | grep -q "$module"; then
                log "${GREEN}  ‚Üí Module critique $module: OK${NC}"
            else
                log "${RED}  ‚Üí Module critique $module: MANQUANT${NC}"
                analyze "Module_$module" "Module critique manquant" "CRITIQUE"
            fi
        done

        # Modules potentiellement probl√©matiques
        if lsmod | grep -q "snd_dummy"; then
            analyze "Module_dummy" "Module dummy audio d√©tect√©" "ATTENTION"
        fi

    else
        analyze "Modules_kernel" "Aucun module kernel audio" "CRITIQUE"
    fi

    # P√©riph√©riques USB audio avec analyse compl√®te
    log "${YELLOW}--- P√©riph√©riques USB audio ---${NC}"
    usb_audio=$(lsusb | grep -i audio)
    if [ -n "$usb_audio" ]; then
        echo "$usb_audio" | tee "$WORKDIR/usb_audio.log"
        usb_audio_count=$(echo "$usb_audio" | wc -l)
        analyze "USB_audio" "$usb_audio_count p√©riph√©riques USB" "INFO"
        add_action "D√©tection de $usb_audio_count p√©riph√©riques USB audio"

        # Analyse d√©taill√©e des p√©riph√©riques USB
        echo "$usb_audio" | while read -r line; do
            device_info=$(echo "$line" | awk '{for(i=7;i<=NF;i++) printf "%s ", $i; print ""}')
            log "${CYAN}  ‚Üí P√©riph√©rique USB: $device_info${NC}"
        done
    else
        analyze "USB_audio" "Aucun p√©riph√©rique USB audio" "INFO"
    fi

    # Devices /dev/snd avec permissions et propri√©t√©s
    log "${YELLOW}--- P√©riph√©riques /dev/snd ---${NC}"
    if [ -d "/dev/snd" ]; then
        ls -la /dev/snd/ | tee "$WORKDIR/dev_snd.log"
        dev_count=$(ls /dev/snd/ | wc -l)
        analyze "Peripheriques_dev" "$dev_count devices trouv√©s" "INFO"
        add_action "Analyse de $dev_count devices dans /dev/snd"

        # V√©rification permissions utilisateur
        user_groups=$(groups)
        if echo "$user_groups" | grep -q audio; then
            analyze "Permissions_audio" "Utilisateur dans groupe audio" "OK"
            log "${GREEN}  ‚Üí Utilisateur dans groupe audio: OK${NC}"
        else
            analyze "Permissions_audio" "Utilisateur PAS dans groupe audio" "CRITIQUE"
            log "${RED}  ‚Üí Utilisateur PAS dans groupe audio: CRITIQUE${NC}"
        fi

        # Test acc√®s devices
        for device in /dev/snd/control*; do
            if [ -e "$device" ]; then
                if [ -r "$device" ]; then
                    log "${GREEN}  ‚Üí Acc√®s lecture $device: OK${NC}"
                else
                    log "${RED}  ‚Üí Acc√®s lecture $device: REFUS√â${NC}"
                    analyze "Acces_device" "Acc√®s refus√© √† $device" "CRITIQUE"
                fi
            fi
        done
    else
        analyze "Peripheriques_dev" "/dev/snd inexistant" "CRITIQUE"
    fi

    # Information d√©taill√©e ALSA
    log "${YELLOW}--- Configuration ALSA ---${NC}"
    if command -v aplay &> /dev/null; then
        aplay -l 2>&1 | tee "$WORKDIR/alsa_devices.log"
        analyze "ALSA_devices" "√ânum√©ration devices ALSA effectu√©e" "INFO"
        add_action "√ânum√©ration devices ALSA"
    fi

    if command -v amixer &> /dev/null; then
        amixer 2>&1 | tee "$WORKDIR/alsa_mixer.log"
        analyze "ALSA_mixer" "Configuration mixer ALSA sauv√©e" "INFO"
    fi
}

# Analyse logs syst√®me - Erreurs, conflits, messages kernel
analyze_system_logs() {
    add_action "Analyse des logs syst√®me audio"

    log "${PURPLE}========================================="
    log "5Ô∏è‚É£  LOGS ET ERREURS SYST√àME"
    log "=========================================${NC}"

    # Journalctl audio avec analyse d'erreurs avanc√©e
    log "${YELLOW}--- Logs syst√®me audio (derni√®res 100 lignes) ---${NC}"
    audio_logs=$(journalctl -xe --no-pager | grep -Ei 'alsa|pulse|pipewire|jack|audio|sound' | tail -100)

    if [ -n "$audio_logs" ]; then
        echo "$audio_logs" | tee "$WORKDIR/system_logs.log"

        # Analyse par types d'erreurs
        error_count=$(echo "$audio_logs" | grep -ic error)
        warning_count=$(echo "$audio_logs" | grep -ic warning)
        critical_count=$(echo "$audio_logs" | grep -ic critical)

        if [ $error_count -gt 0 ]; then
            analyze "Erreurs_systeme" "$error_count erreurs d√©tect√©es" "CRITIQUE"
            log "${RED}  ‚Üí $error_count erreurs dans les logs syst√®me${NC}"
        fi

        if [ $warning_count -gt 0 ]; then
            analyze "Warnings_systeme" "$warning_count warnings d√©tect√©s" "ATTENTION"
            log "${YELLOW}  ‚Üí $warning_count warnings dans les logs syst√®me${NC}"
        fi

        if [ $critical_count -gt 0 ]; then
            analyze "Critical_systeme" "$critical_count messages critiques" "CRITIQUE"
            log "${RED}  ‚Üí $critical_count messages critiques${NC}"
        fi

        if [ $error_count -eq 0 ] && [ $warning_count -eq 0 ]; then
            analyze "Logs_systeme" "Aucune erreur majeure d√©tect√©e" "OK"
        fi

        add_action "Analyse de $((error_count + warning_count)) probl√®mes dans les logs"
    else
        analyze "Logs_systeme" "Aucun log audio trouv√©" "ATTENTION"
    fi

    # Analyse dmesg pour erreurs mat√©rielles/kernel
    log "${YELLOW}--- Messages kernel audio ---${NC}"
    kernel_audio=$(dmesg | grep -Ei 'audio|alsa|snd|sound|usb.*audio' | tail -50)

    if [ -n "$kernel_audio" ]; then
        echo "$kernel_audio" | tee "$WORKDIR/dmesg_audio.log"

        # Recherche erreurs kernel sp√©cifiques
        kernel_errors=$(echo "$kernel_audio" | grep -i "error\|failed\|timeout")
        if [ -n "$kernel_errors" ]; then
            kernel_error_count=$(echo "$kernel_errors" | wc -l)
            analyze "Erreurs_kernel" "$kernel_error_count erreurs kernel audio" "CRITIQUE"
            log "${RED}  ‚Üí $kernel_error_count erreurs kernel audio d√©tect√©es${NC}"
        else
            analyze "Kernel_audio" "Messages kernel audio sans erreur" "OK"
        fi

        add_action "Analyse messages kernel audio"
    fi

    # Logs sp√©cifiques PulseAudio si disponibles
    pulse_log_locations=("/var/log/pulse.log" "~/.pulse/pulse.log" "/tmp/pulse-*.log")
    for log_location in "${pulse_log_locations[@]}"; do
        if ls $log_location 2>/dev/null; then
            log "${YELLOW}--- Logs PulseAudio ($log_location) ---${NC}"
            tail -50 $log_location 2>/dev/null | tee "$WORKDIR/pulse_specific.log"
            analyze "Logs_PulseAudio" "Logs sp√©cifiques PulseAudio trouv√©s" "INFO"
            break
        fi
    done

    # V√©rification core dumps audio
    if ls /var/crash/*pulse* /var/crash/*pipewire* /var/crash/*jack* 2>/dev/null; then
        analyze "Core_dumps" "Core dumps audio d√©tect√©s" "CRITIQUE"
        log "${RED}  ‚Üí Core dumps de processus audio d√©tect√©s${NC}"
        ls -la /var/crash/*pulse* /var/crash/*pipewire* /var/crash/*jack* 2>/dev/null | tee "$WORKDIR/core_dumps.log"
    fi
}

# Configuration et environnement - Variables, configs, fichiers syst√®me
analyze_configuration_environment() {
    add_action "Analyse configuration et environnement audio"

    log "${PURPLE}========================================="
    log "6Ô∏è‚É£  CONFIGURATION ET ENVIRONNEMENT"
    log "=========================================${NC}"

    # Variables d'environnement audio
    log "${YELLOW}--- Variables environnement audio ---${NC}"
    audio_env=$(env | grep -Ei 'pulse|pipewire|jack|alsa|audio')

    if [ -n "$audio_env" ]; then
        echo "$audio_env" | tee "$WORKDIR/env_audio.log"
        env_count=$(echo "$audio_env" | wc -l)
        analyze "Variables_env" "$env_count variables audio d√©finies" "INFO"
        add_action "Sauvegarde de $env_count variables d'environnement audio"

        # Analyse variables critiques
        if env | grep -q "PULSE_RUNTIME_PATH"; then
            pulse_runtime=$(env | grep "PULSE_RUNTIME_PATH" | cut -d'=' -f2)
            analyze "PULSE_RUNTIME_PATH" "$pulse_runtime" "INFO"
        fi
    else
        analyze "Variables_env" "Aucune variable environnement audio" "INFO"
    fi

    # Fichiers de configuration utilisateur
    log "${YELLOW}--- Configurations utilisateur ---${NC}"
    config_files=(
        "$HOME/.config/pulse/client.conf"
        "$HOME/.config/pulse/daemon.conf"
        "$HOME/.config/pipewire/pipewire.conf"
        "$HOME/.asoundrc"
        "$HOME/.config/alsa/asoundrc"
    )

    for config_file in "${config_files[@]}"; do
        if [ -f "$config_file" ]; then
            log "${CYAN}Configuration trouv√©e: $config_file${NC}"
            backup_config "$config_file" "$(basename "$config_file")"
            cat "$config_file" | tee "$WORKDIR/config_$(basename "$config_file").log"
            analyze "Config_$(basename "$config_file")" "Configuration personnalis√©e d√©tect√©e" "INFO"
        fi
    done

    # Fichiers de configuration syst√®me
    log "${YELLOW}--- Configurations syst√®me ---${NC}"
    system_configs=(
        "/etc/pulse/client.conf"
        "/etc/pulse/daemon.conf"
        "/etc/pulse/system.pa"
        "/etc/pipewire/pipewire.conf"
        "/etc/alsa/conf.d/"
        "/usr/share/alsa/alsa.conf"
    )

    for config in "${system_configs[@]}"; do
        if [ -f "$config" ] || [ -d "$config" ]; then
            log "${CYAN}Configuration syst√®me: $config${NC}"
            if [ -f "$config" ]; then
                cat "$config" | tee "$WORKDIR/system_$(basename "$config").log" 2>/dev/null
            else
                ls -la "$config" | tee "$WORKDIR/system_$(basename "$config")_dir.log" 2>/dev/null
            fi
            analyze "Config_system_$(basename "$config")" "Configuration syst√®me pr√©sente" "INFO"
        fi
    done

    # Services systemd audio
    log "${YELLOW}--- Services systemd audio ---${NC}"
    audio_services=("pulseaudio" "pipewire" "pipewire-pulse" "pipewire-media-session" "wireplumber")

    for service in "${audio_services[@]}"; do
        service_status=$(systemctl --user is-active "$service" 2>/dev/null)
        if [ "$service_status" = "active" ]; then
            log "${GREEN}  ‚Üí Service $service: ACTIF${NC}"
            analyze "Service_$service" "Actif" "OK"
        elif [ "$service_status" = "inactive" ]; then
            log "${YELLOW}  ‚Üí Service $service: INACTIF${NC}"
            analyze "Service_$service" "Inactif" "INFO"
        elif [ "$service_status" = "failed" ]; then
            log "${RED}  ‚Üí Service $service: √âCHEC${NC}"
            analyze "Service_$service" "En √©chec" "CRITIQUE"
        fi

        # Logs d√©taill√©s du service
        systemctl --user status "$service" 2>/dev/null | tee "$WORKDIR/service_${service}.log"
    done

    add_action "Analyse des services systemd audio"

    # Autostart et sessions
    log "${YELLOW}--- Applications de d√©marrage audio ---${NC}"
    autostart_dirs=("$HOME/.config/autostart" "/etc/xdg/autostart")

    for dir in "${autostart_dirs[@]}"; do
        if [ -d "$dir" ]; then
            audio_autostart=$(ls "$dir"/*.desktop 2>/dev/null | xargs grep -l -i "audio\|pulse\|pipewire\|jack" 2>/dev/null)
            if [ -n "$audio_autostart" ]; then
                echo "$audio_autostart" | tee "$WORKDIR/autostart_audio.log"
                autostart_count=$(echo "$audio_autostart" | wc -l)
                analyze "Autostart_audio" "$autostart_count applications audio au d√©marrage" "INFO"
            fi
        fi
    done
}

# Tests de transcription - Whisper, speech recognition, quality
test_transcription_engines() {
    add_action "Tests des moteurs de transcription"

    log "${PURPLE}========================================="
    log "7Ô∏è‚É£  TESTS DE TRANSCRIPTION"
    log "=========================================${NC}"

    # Test Whisper si disponible
    if command -v whisper &> /dev/null; then
        log "${YELLOW}üß† Test Whisper local...${NC}"
        add_action "Test de transcription avec Whisper"

        if [ -f "$WORKDIR/test_micro.wav" ]; then
            # Test avec diff√©rents mod√®les si disponibles
            whisper_models=("tiny" "base" "small")

            for model in "${whisper_models[@]}"; do
                log "${CYAN}  ‚Üí Test mod√®le Whisper: $model${NC}"

                if whisper "$WORKDIR/test_micro.wav" --language fr --model "$model" --output_format txt 2>&1 | tee "$WORKDIR/whisper_${model}_output.log"; then

                    result_file="$WORKDIR/test_micro.txt"
                    if [ -f "$result_file" ]; then
                        whisper_result=$(cat "$result_file")
                        echo "$whisper_result" | tee "$WORKDIR/whisper_${model}_result.txt"

                        log "${YELLOW}--- R√©sultat Whisper $model ---${NC}"
                        log "${CYAN}$whisper_result${NC}"

                        # Analyse qualit√© transcription
                        if echo "$whisper_result" | grep -qi "bonjour\|test\|micro\|un\|deux\|trois"; then
                            analyze "Whisper_${model}" "Transcription coh√©rente d√©tect√©e" "OK"
                            log "${GREEN}  ‚Üí Transcription coh√©rente avec mod√®le $model${NC}"
                        else
                            analyze "Whisper_${model}" "Transcription incoh√©rente ou pollu√©e" "CRITIQUE"
                            log "${RED}  ‚Üí Transcription pollu√©e avec mod√®le $model: '$whisper_result'${NC}"
                        fi

                        # Calcul score de confiance approximatif
                        word_count=$(echo "$whisper_result" | wc -w)
                        if [ $word_count -gt 0 ] && [ $word_count -lt 50 ]; then
                            analyze "Whisper_${model}_longueur" "$word_count mots - Longueur normale" "OK"
                        elif [ $word_count -ge 50 ]; then
                            analyze "Whisper_${model}_longueur" "$word_count mots - Trop long, possible hallucination" "SUSPECT"
                        fi

                        # Renommer le fichier pour √©viter l'√©crasement
                        mv "$result_file" "$WORKDIR/whisper_${model}_result.txt" 2>/dev/null
                    else
                        analyze "Whisper_${model}" "√âchec g√©n√©ration fichier r√©sultat" "CRITIQUE"
                    fi
                else
                    analyze "Whisper_${model}" "√âchec ex√©cution Whisper" "CRITIQUE"
                fi
            done
        else
            log "${RED}‚ùå Fichier test_micro.wav introuvable pour test Whisper${NC}"
            analyze "Whisper_test" "Fichier audio manquant" "CRITIQUE"
        fi
    else
        log "${RED}‚ùå Whisper non install√©${NC}"
        analyze "Whisper_disponible" "Non install√©" "INFO"
    fi

    # Test speech-dispatcher si disponible
    if command -v spd-say &> /dev/null; then
        log "${YELLOW}üó£Ô∏è  Test speech-dispatcher...${NC}"
        echo "test speech dispatcher" | spd-say 2>&1 | tee "$WORKDIR/speech_dispatcher.log"
        analyze "Speech_dispatcher" "Disponible et test√©" "INFO"
        add_action "Test speech-dispatcher effectu√©"
    fi

    # Test espeak si disponible
    if command -v espeak &> /dev/null; then
        log "${YELLOW}üîä Test espeak...${NC}"
        espeak "test espeak" 2>&1 | tee "$WORKDIR/espeak.log"
        analyze "Espeak" "Disponible et test√©" "INFO"
        add_action "Test espeak effectu√©"
    fi

    # Test festival si disponible
    if command -v festival &> /dev/null; then
        log "${YELLOW}üé≠ Test festival...${NC}"
        echo "test festival" | festival --tts 2>&1 | tee "$WORKDIR/festival.log"
        analyze "Festival" "Disponible et test√©" "INFO"
        add_action "Test festival effectu√©"
    fi

    # Test reconnaissance vocale Google si curl disponible
    if command -v curl &> /dev/null && [ -f "$WORKDIR/test_micro.wav" ]; then
        log "${YELLOW}üåê Test API reconnaissance vocale (si connexion)...${NC}"
        # Note: Test basique de connectivit√© uniquement, pas d'envoi de donn√©es
        if curl -s --connect-timeout 5 https://www.google.com >/dev/null; then
            analyze "Connectivite_API" "Connexion internet disponible pour APIs" "INFO"
        else
            analyze "Connectivite_API" "Pas de connexion internet" "INFO"
        fi
    fi
}

# Analyse r√©seau et s√©curit√© - Connexions suspectes, processus r√©seau
analyze_network_security() {
    add_action "Analyse r√©seau et s√©curit√© audio"

    log "${PURPLE}========================================="
    log "8Ô∏è‚É£  ANALYSE R√âSEAU ET S√âCURIT√â"
    log "=========================================${NC}"

    # Connexions r√©seau actives suspectes
    log "${YELLOW}--- Connexions r√©seau actives ---${NC}"
    if command -v netstat &> /dev/null; then
        network_connections=$(netstat -tulpn 2>/dev/null | grep -E ':80|:443|:8080|:3000|:8000|:9000')

        if [ -n "$network_connections" ]; then
            echo "$network_connections" | tee "$WORKDIR/network_connections.log"
            connection_count=$(echo "$network_connections" | wc -l)
            analyze "Connexions_reseau" "$connection_count connexions web d√©tect√©es" "INFO"
            add_action "Analyse de $connection_count connexions r√©seau"

            # Analyse connexions suspectes
            suspicious_ports=$(echo "$network_connections" | grep -E ':8080|:3000|:8000|:9000')
            if [ -n "$suspicious_ports" ]; then
                suspicious_count=$(echo "$suspicious_ports" | wc -l)
                analyze "Ports_suspects" "$suspicious_count ports non-standard actifs" "ATTENTION"
                log "${YELLOW}  ‚Üí $suspicious_count ports non-standard d√©tect√©s${NC}"
            fi
        else
            analyze "Connexions_reseau" "Aucune connexion web standard d√©tect√©e" "OK"
        fi
    fi

    # Processus avec connexions r√©seau
    log "${YELLOW}--- Processus avec connexions r√©seau ---${NC}"
    if command -v lsof &> /dev/null; then
        network_processes=$(lsof -i 2>/dev/null | grep -v "ESTABLISHED.*:22" | grep -v "chrome\|firefox")

        if [ -n "$network_processes" ]; then
            echo "$network_processes" | tee "$WORKDIR/network_processes.log"
            net_proc_count=$(echo "$network_processes" | wc -l)
            analyze "Processus_reseau" "$net_proc_count processus avec connexions r√©seau" "INFO"
            add_action "D√©tection de $net_proc_count processus r√©seau"

            # Recherche processus audio avec connexions r√©seau
            audio_network=$(echo "$network_processes" | grep -Ei 'pulse|pipewire|jack|audio|sound')
            if [ -n "$audio_network" ]; then
                audio_net_count=$(echo "$audio_network" | wc -l)
                analyze "Audio_reseau" "$audio_net_count processus audio avec r√©seau" "ATTENTION"
                log "${YELLOW}  ‚Üí $audio_net_count processus audio avec connexions r√©seau${NC}"
                echo "$audio_network" | tee "$WORKDIR/audio_network_processes.log"
            fi
        fi
    fi

    # V√©rification ports d'√©coute audio suspects
    suspicious_audio_ports=(8000 8080 3000 9000 5000 4000)
    log "${YELLOW}--- V√©rification ports audio suspects ---${NC}"

    for port in "${suspicious_audio_ports[@]}"; do
        if netstat -tln 2>/dev/null | grep -q ":$port "; then
            listening_process=$(netstat -tlnp 2>/dev/null | grep ":$port " | awk '{print $7}' | cut -d'/' -f2)
            analyze "Port_$port" "Port $port ouvert - processus: $listening_process" "SUSPECT"
            log "${RED}  ‚Üí Port suspect $port ouvert par: $listening_process${NC}"
        fi
    done

    # Analyse trafic r√©seau temps r√©el si tcpdump disponible
    if command -v tcpdump &> /dev/null && [ "$EUID" -eq 0 ]; then
        log "${YELLOW}--- Analyse trafic r√©seau (5 secondes) ---${NC}"
        timeout 5 tcpdump -i any -c 20 port not 22 2>&1 | tee "$WORKDIR/network_traffic.log" || true
        analyze "Trafic_reseau" "√âchantillon trafic captur√©" "INFO"
        add_action "Capture √©chantillon trafic r√©seau"
    fi

    # V√©rification fichiers hosts et DNS
    log "${YELLOW}--- V√©rification configuration r√©seau ---${NC}"
    if [ -f "/etc/hosts" ]; then
        suspicious_hosts=$(grep -v "^#\|^$\|127.0.0.1\|::1\|localhost" /etc/hosts)
        if [ -n "$suspicious_hosts" ]; then
            echo "$suspicious_hosts" | tee "$WORKDIR/suspicious_hosts.log"
            analyze "Hosts_suspects" "Entr√©es hosts personnalis√©es d√©tect√©es" "ATTENTION"
        else
            analyze "Fichier_hosts" "Fichier hosts standard" "OK"
        fi
    fi

    # V√©rification proxy/VPN
    if env | grep -qi "proxy\|vpn"; then
        proxy_vars=$(env | grep -i "proxy\|vpn")
        echo "$proxy_vars" | tee "$WORKDIR/proxy_config.log"
        analyze "Configuration_proxy" "Configuration proxy/VPN d√©tect√©e" "INFO"
    fi
}

# G√©n√©ration rapport d'analyse - Synth√®se automatique et recommandations
generate_analysis_report() {
    add_action "G√©n√©ration du rapport d'analyse automatique"

    log "${PURPLE}========================================="
    log "9Ô∏è‚É£  G√âN√âRATION RAPPORT D'ANALYSE"
    log "=========================================${NC}"

    log "${YELLOW}üîç G√©n√©ration du rapport d'analyse complet...${NC}"

    # Header du rapport avec informations syst√®me
    cat > "$ANALYSIS_FILE" << EOF
========================================================================
üéôÔ∏è RAPPORT D'ANALYSE AUDIO AUTOMATIQUE ULTRA-COMPLET
========================================================================

G√©n√©r√© le: $(date)
Script: $SCRIPT_NAME $SCRIPT_VERSION
Syst√®me: $(uname -a)
Utilisateur: $(whoami)
R√©pertoire: $(pwd)

========================================================================
üìä R√âSUM√â EX√âCUTIF
========================================================================
EOF

    # Calcul statistiques analyse
    total_items=$(wc -l < "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    critiques=$(grep -c "CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    suspects=$(grep -c "SUSPECT" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    attentions=$(grep -c "ATTENTION" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    ok_items=$(grep -c "OK" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")

    cat >> "$ANALYSIS_FILE" << EOF

Total d'√©l√©ments analys√©s: $total_items
üö® Probl√®mes CRITIQUES: $critiques
üîç √âl√©ments SUSPECTS: $suspects
‚ö†Ô∏è Points d'ATTENTION: $attentions
‚úÖ √âl√©ments OK: $ok_items

NIVEAU DE RISQUE GLOBAL: $(
    if [ $critiques -gt 0 ]; then
        echo "üö® CRITIQUE - Action imm√©diate requise"
    elif [ $suspects -gt 2 ]; then
        echo "‚ö†Ô∏è √âLEV√â - Investigation approfondie n√©cessaire"
    elif [ $suspects -gt 0 ] || [ $attentions -gt 3 ]; then
        echo "‚ö° MOD√âR√â - Surveillance recommand√©e"
    else
        echo "‚úÖ FAIBLE - Syst√®me normal"
    fi
)

EOF

    # Analyse des probl√®mes par cat√©gorie
    grep "CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null > "$WORKDIR/critiques.tmp"
    grep "SUSPECT" "$WORKDIR/raw_analysis.csv" 2>/dev/null > "$WORKDIR/suspects.tmp"
    grep "ATTENTION" "$WORKDIR/raw_analysis.csv" 2>/dev/null > "$WORKDIR/attentions.tmp"

    if [ -s "$WORKDIR/critiques.tmp" ]; then
        cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üö® PROBL√àMES CRITIQUES D√âTECT√âS
========================================================================

Ces probl√®mes n√©cessitent une action IMM√âDIATE:

EOF
        while IFS='|' read -r cat result status; do
            echo "‚ùå $cat: $result" >> "$ANALYSIS_FILE"
        done < "$WORKDIR/critiques.tmp"
    fi

    if [ -s "$WORKDIR/suspects.tmp" ]; then
        cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üîç √âL√âMENTS SUSPECTS IDENTIFI√âS
========================================================================

Ces √©l√©ments sont probablement responsables du probl√®me:

EOF
        while IFS='|' read -r cat result status; do
            echo "üîç $cat: $result" >> "$ANALYSIS_FILE"
        done < "$WORKDIR/suspects.tmp"
    fi

    if [ -s "$WORKDIR/attentions.tmp" ]; then
        cat >> "$ANALYSIS_FILE" << EOF

========================================================================
‚ö†Ô∏è POINTS D'ATTENTION
========================================================================

Ces √©l√©ments m√©ritent surveillance:

EOF
        while IFS='|' read -r cat result status; do
            echo "‚ö†Ô∏è $cat: $result" >> "$ANALYSIS_FILE"
        done < "$WORKDIR/attentions.tmp"
    fi

    # G√©n√©ration recommandations automatiques intelligentes
    cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üéØ RECOMMANDATIONS AUTOMATIQUES INTELLIGENTES
========================================================================

Bas√© sur l'analyse compl√®te, voici les actions recommand√©es par priorit√©:

EOF

    # Recommandations bas√©es sur l'analyse - Logique intelligente
    recommendation_count=1

    # V√©rifier NoiseTorch
    if grep -q "NoiseTorch.*SUSPECT" "$WORKDIR/raw_analysis.csv" 2>/dev/null; then
        cat >> "$ANALYSIS_FILE" << EOF
$recommendation_count. üö® PRIORIT√â CRITIQUE: D√©sactiver NoiseTorch
   NoiseTorch est un filtre audio actif qui modifie votre signal vocal.

   Actions:
   ‚Üí sudo systemctl stop noisetorch
   ‚Üí sudo systemctl disable noisetorch
   ‚Üí killall noisetorch

   Red√©marrez puis testez la transcription.

EOF
        recommendation_count=$((recommendation_count + 1))
    fi

    # V√©rifier loopback
    if grep -q "Module_loopback.*SUSPECT" "$WORKDIR/raw_analysis.csv" 2>/dev/null; then
        cat >> "$ANALYSIS_FILE" << EOF
$recommendation_count. ‚ö†Ô∏è PRIORIT√â √âLEV√âE: D√©sactiver modules loopback
   Les modules loopback causent des √©chos et boucles audio.

   Actions:
   ‚Üí pactl list modules short | grep loopback
   ‚Üí pactl unload-module module-loopback

   Puis relancer le diagnostic.

EOF
        recommendation_count=$((recommendation_count + 1))
    fi

    # V√©rifier permissions
    if grep -q "Permissions_audio.*CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null; then
        cat >> "$ANALYSIS_FILE" << EOF
$recommendation_count. üîß PRIORIT√â √âLEV√âE: Corriger permissions audio
   Votre utilisateur n'est pas dans le groupe audio.

   Actions:
   ‚Üí sudo usermod -a -G audio \$USER
   ‚Üí Red√©marrer la session

   Essentiel pour acc√®s aux p√©riph√©riques audio.

EOF
        recommendation_count=$((recommendation_count + 1))
    fi

    # V√©rifier JACK
    if grep -q "JACK.*INFO" "$WORKDIR/raw_analysis.csv" 2>/dev/null; then
        cat >> "$ANALYSIS_FILE" << EOF
$recommendation_count. ‚ö° PRIORIT√â MOD√âR√âE: G√©rer conflit JACK
   JACK peut interf√©rer avec PulseAudio/PipeWire.

   Actions:
   ‚Üí Arr√™ter JACK temporairement: sudo systemctl stop jack
   ‚Üí Tester transcription sans JACK
   ‚Üí Configurer bridge JACK-Pulse si n√©cessaire

EOF
        recommendation_count=$((recommendation_count + 1))
    fi

    # V√©rifier erreurs critiques
    if grep -q "Erreurs_systeme.*CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null; then
        cat >> "$ANALYSIS_FILE" << EOF
$recommendation_count. üö® PRIORIT√â CRITIQUE: R√©soudre erreurs syst√®me
   Erreurs critiques d√©tect√©es dans les logs syst√®me.

   Actions:
   ‚Üí Consulter le fichier system_logs.log
   ‚Üí Red√©marrer les services audio: systemctl --user restart pulseaudio
   ‚Üí V√©rifier int√©grit√© du syst√®me: dmesg | grep -i error

EOF
        recommendation_count=$((recommendation_count + 1))
    fi

    # Recommandations g√©n√©rales si pas de probl√®me critique
    if [ $critiques -eq 0 ] && [ $suspects -eq 0 ]; then
        cat >> "$ANALYSIS_FILE" << EOF
‚úÖ SYST√àME SAIN D√âTECT√â

Aucun probl√®me critique identifi√©. Le probl√®me de transcription
peut venir d'autres facteurs:

1. üåê Tester avec diff√©rents services (local vs cloud)
2. üé§ Essayer un autre micro/casque
3. üîÑ Red√©marrer compl√®tement le syst√®me
4. üì∂ V√©rifier la qualit√© de connexion r√©seau
5. üß† Tester avec diff√©rents mod√®les Whisper

EOF
    fi

    # Plan d'action √©tape par √©tape
    cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üìã PLAN D'ACTION √âTAPE PAR √âTAPE
========================================================================

PHASE 1 - Actions imm√©diates (0-15 minutes):
1. Appliquer recommandations critiques ci-dessus
2. Red√©marrer services audio: systemctl --user restart pulseaudio
3. Tester enregistrement: arecord -f cd -t wav -d 5 test_fix.wav

PHASE 2 - V√©rifications (15-30 minutes):
1. Relancer ce diagnostic pour comparer
2. Tester transcription avec fichier test_fix.wav
3. V√©rifier si probl√®me persiste sur diff√©rentes plateformes

PHASE 3 - Solutions avanc√©es (si n√©cessaire):
1. R√©installation compl√®te stack audio
2. Test avec Live USB autre distribution
3. Configuration manuelle avanc√©e PulseAudio/PipeWire

EOF

    # Tableau r√©capitulatif final d√©taill√©
    cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üìä TABLEAU R√âCAPITULATIF COMPLET D√âTAILL√â
========================================================================

EOF

    printf "%-30s %-50s %-12s\n" "CAT√âGORIE" "R√âSULTAT" "STATUS" >> "$ANALYSIS_FILE"
    echo "----------------------------------------------------------------------------------------" >> "$ANALYSIS_FILE"

    # Tri des r√©sultats par priorit√© (CRITIQUE > SUSPECT > ATTENTION > OK)
    for status_filter in "CRITIQUE" "SUSPECT" "ATTENTION" "INFO" "OK"; do
        grep "|$status_filter$" "$WORKDIR/raw_analysis.csv" 2>/dev/null | while IFS='|' read -r cat result status; do
            printf "%-30s %-50s %-12s\n" "$cat" "$result" "$status" >> "$ANALYSIS_FILE"
        done
    done

    # Footer du rapport avec informations de contact et suivi
    cat >> "$ANALYSIS_FILE" << EOF

========================================================================
üìû INFORMATIONS COMPL√âMENTAIRES
========================================================================

FICHIERS G√âN√âR√âS POUR ANALYSE MANUELLE:
- test_micro.wav: Fichier audio de test (√©couter pour v√©rifier qualit√©)
- system_logs.log: Logs syst√®me complets
- processes_audio.log: Processus audio d√©tect√©s
- modules.log: Modules PulseAudio/PipeWire
- kernel_modules.log: Modules kernel audio
- sources.log: Sources audio syst√®me

COMMANDES DE SUIVI RECOMMAND√âES:
‚Üí aplay test_micro.wav (√©couter qualit√© enregistrement)
‚Üí pactl list sources short (v√©rifier sources actives)
‚Üí journalctl -xe | grep -i audio (logs temps r√©el)

PROCHAINES √âTAPES SI PROBL√àME PERSISTE:
1. Sauvegarder ce rapport complet
2. Tester sur autre syst√®me/distribution
3. Contacter support technique avec ce diagnostic

AUTEUR: Bruno DELNOZ <bruno.delnoz@protonmail.com>
VERSION: $SCRIPT_VERSION - $SCRIPT_DATE

========================================================================
üèÅ FIN DU RAPPORT - $(date)
========================================================================
EOF

    # Nettoyage fichiers temporaires
    rm -f "$WORKDIR"/*.tmp 2>/dev/null

    add_action "Rapport d'analyse g√©n√©r√©: $ANALYSIS_FILE"
}

#########################################################################
# FONCTIONS PRINCIPALES - Gestion arguments et ex√©cution
#########################################################################

# Fonction ex√©cution compl√®te - Lance tous les modules d'analyse
execute_full_diagnostic() {
    log "${GREEN}========================================="
    log "üöÄ LANCEMENT DIAGNOSTIC ULTRA-COMPLET"
    log "=========================================${NC}"

    # Initialisation environnement de travail
    mkdir -p "$WORKDIR"
    cd "$WORKDIR" || exit 1

    # Header CSV pour analyse
    echo "Cat√©gorie|R√©sultat|Status" > raw_analysis.csv

    add_action "Initialisation environnement de diagnostic"
    log "üìÅ Dossier de travail: $(pwd)"
    log "üìã Fichier de log: $LOG_FILE"

    # V√©rification pr√©requis avant d√©marrage
    if ! check_prerequisites; then
        log "${RED}‚ùå Pr√©requis manquants, arr√™t du diagnostic${NC}"
        exit 1
    fi

    # Ex√©cution modules d'analyse en s√©quence
    test_hardware_recording
    analyze_system_processes
    analyze_audio_configuration
    analyze_hardware_drivers
    analyze_system_logs
    analyze_configuration_environment
    test_transcription_engines
    analyze_network_security
    generate_analysis_report

    # Retour au r√©pertoire parent
    cd ..

    # Affichage r√©sum√© final
    log "${GREEN}========================================="
    log "üèÅ DIAGNOSTIC ULTRA-COMPLET TERMIN√â"
    log "=========================================${NC}"
    log "üìÅ Tous les r√©sultats dans: $WORKDIR/"
    log "üìã Rapport d'analyse: $ANALYSIS_FILE"
    log "üìù Log complet: $LOG_FILE"
    log ""

    # Statistiques finales color√©es
    total_items=$(wc -l < "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    critiques=$(grep -c "CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    suspects=$(grep -c "SUSPECT" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    attentions=$(grep -c "ATTENTION" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    ok_items=$(grep -c "OK" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")

    log "${CYAN}üìä R√âSUM√â STATISTIQUES:${NC}"
    log "${RED}üö® Critiques: $critiques${NC}"
    log "${YELLOW}üîç Suspects: $suspects${NC}"
    log "${BLUE}‚ö†Ô∏è  Attentions: $attentions${NC}"
    log "${GREEN}‚úÖ OK: $ok_items${NC}"
    log "${PURPLE}üìä Total analys√©: $total_items √©l√©ments${NC}"
    log ""

    # Recommandation finale
    if [ $critiques -gt 0 ]; then
        log "${RED}üö® ACTION REQUISE: Consulte imm√©diatement le rapport d'analyse !${NC}"
    elif [ $suspects -gt 0 ]; then
        log "${YELLOW}üîç INVESTIGATION: √âl√©ments suspects d√©tect√©s, consulte le rapport${NC}"
    else
        log "${GREEN}‚úÖ SYST√àME OK: Peu de probl√®mes d√©tect√©s${NC}"
    fi

    log "${PURPLE}üéØ Consulte le fichier '$ANALYSIS_FILE' pour le rapport d√©taill√© complet!${NC}"
    log "${CYAN}=========================================${NC}"

    # Affichage liste des actions effectu√©es
    log ""
    log "${CYAN}üìã R√âCAPITULATIF DES ACTIONS EFFECTU√âES:${NC}"
    for action in "${ACTIONS_LIST[@]}"; do
        log "${GREEN}$action${NC}"
    done
    log ""

    # Aper√ßu du rapport d'analyse
    if [ -f "$ANALYSIS_FILE" ]; then
        log "${CYAN}üìÑ APER√áU DU RAPPORT D'ANALYSE:${NC}"
        log "${BLUE}$(head -20 "$ANALYSIS_FILE")${NC}"
        log "${CYAN}... (consulter le fichier complet pour d√©tails)${NC}"
    fi
}

# Fonction suppression propre - Nettoie tous les fichiers cr√©√©s
delete_all_files() {
    log "${YELLOW}========================================="
    log "üóëÔ∏è  SUPPRESSION PROPRE DE TOUS LES FICHIERS"
    log "=========================================${NC}"

    add_action "D√©marrage suppression propre"

    # Recherche tous les dossiers de diagnostic
    diagnostic_dirs=$(find . -maxdepth 1 -type d -name "${SCRIPT_NAME}_*" 2>/dev/null)

    if [ -n "$diagnostic_dirs" ]; then
        log "${YELLOW}Dossiers de diagnostic trouv√©s:${NC}"
        echo "$diagnostic_dirs"

        echo "$diagnostic_dirs" | while read -r dir; do
            if [ -d "$dir" ]; then
                log "${RED}Suppression: $dir${NC}"
                rm -rf "$dir"
                add_action "Suppression dossier: $dir"
            fi
        done
    else
        log "${GREEN}Aucun dossier de diagnostic √† supprimer${NC}"
    fi

    # Suppression logs du script
    log_files=$(find . -maxdepth 1 -name "log.${SCRIPT_NAME}.*.log" 2>/dev/null)

    if [ -n "$log_files" ]; then
        log "${YELLOW}Fichiers de log trouv√©s:${NC}"
        echo "$log_files"

        echo "$log_files" | while read -r logfile; do
            if [ -f "$logfile" ]; then
                log "${RED}Suppression: $logfile${NC}"
                rm -f "$logfile"
                add_action "Suppression log: $logfile"
            fi
        done
    else
        log "${GREEN}Aucun fichier de log √† supprimer${NC}"
    fi

    # Suppression dossier de backups
    if [ -d "$BACKUP_DIR" ]; then
        log "${YELLOW}Dossier de backups trouv√©: $BACKUP_DIR${NC}"

        # Restauration des configurations sauvegard√©es
        backup_files=$(find "$BACKUP_DIR" -name "*.bak" 2>/dev/null)
        if [ -n "$backup_files" ]; then
            log "${CYAN}Restauration des configurations sauvegard√©es:${NC}"

            echo "$backup_files" | while read -r backup; do
                # Extraction nom original et chemin
                backup_basename=$(basename "$backup" .bak)
                original_name=$(echo "$backup_basename" | sed 's/_[0-9]\{8\}_[0-9]\{6\}$//')

                # Tentative de restauration intelligente
                possible_paths=(
                    "$HOME/.config/pulse/$original_name"
                    "$HOME/.config/pipewire/$original_name"
                    "$HOME/$original_name"
                    "/etc/pulse/$original_name"
                )

                for path in "${possible_paths[@]}"; do
                    if [ -f "$path" ]; then
                        log "${BLUE}  ‚Üí Restauration $backup vers $path${NC}"
                        cp "$backup" "$path"
                        add_action "Restauration config: $path"
                        break
                    fi
                done
            done
        fi

        log "${RED}Suppression dossier backups: $BACKUP_DIR${NC}"
        rm -rf "$BACKUP_DIR"
        add_action "Suppression dossier backups"
    else
        log "${GREEN}Aucun dossier de backup √† supprimer${NC}"
    fi

    # Nettoyage fichiers temporaires r√©siduels
    temp_files=$(find /tmp -name "*${SCRIPT_NAME}*" -user "$(whoami)" 2>/dev/null)
    if [ -n "$temp_files" ]; then
        log "${YELLOW}Fichiers temporaires trouv√©s dans /tmp:${NC}"
        echo "$temp_files" | while read -r temp_file; do
            rm -rf "$temp_file"
            add_action "Suppression temp: $temp_file"
        done
    fi

    log "${GREEN}========================================="
    log "‚úÖ SUPPRESSION PROPRE TERMIN√âE"
    log "=========================================${NC}"

    # Affichage actions de suppression
    log "${CYAN}üìã ACTIONS DE SUPPRESSION EFFECTU√âES:${NC}"
    for action in "${ACTIONS_LIST[@]}"; do
        log "${GREEN}$action${NC}"
    done

    log "${GREEN}üßπ Tous les fichiers cr√©√©s par le script ont √©t√© supprim√©s${NC}"
    log "${GREEN}üîÑ Configurations originales restaur√©es si applicable${NC}"
}

#########################################################################
# LOGIQUE PRINCIPALE - Gestion des arguments et routing
#########################################################################

# Fonction principale - Router les arguments vers les bonnes fonctions
main() {
    # V√©rification arguments
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    case "$1" in
        --help|-h)
            show_help
            ;;
        --exec)
            execute_full_diagnostic
            ;;
        --delete)
            delete_all_files
            ;;
        *)
            log "${RED}‚ùå Argument non reconnu: $1${NC}"
            log "${YELLOW}Utilise --help pour voir l'aide compl√®te${NC}"
            exit 1
            ;;
    esac
}

#########################################################################
# POINT D'ENTR√âE - Lancement du script avec gestion d'erreurs
#########################################################################

# Gestion des signaux pour nettoyage propre
trap 'log "${RED}Script interrompu par utilisateur${NC}"; exit 130' INT TERM

# V√©rification environnement bash
if [ -z "$BASH_VERSION" ]; then
    echo "‚ùå Ce script n√©cessite bash, pas sh"
    exit 1
fi

# V√©rification droits d'√©criture
if [ ! -w "." ]; then
    echo "‚ùå Pas de droits d'√©criture dans le r√©pertoire courant"
    exit 1
fi

# Lancement fonction principale avec tous les arguments
main "$@"

# Code de sortie bas√© sur les r√©sultats si ex√©cution compl√®te
if [ "$1" = "--exec" ] && [ -f "$WORKDIR/raw_analysis.csv" ]; then
    critiques=$(grep -c "CRITIQUE" "$WORKDIR/raw_analysis.csv" 2>/dev/null || echo "0")
    if [ $critiques -gt 0 ]; then
        exit 2  # Code erreur pour probl√®mes critiques d√©tect√©s
    fi
fi

exit 0
