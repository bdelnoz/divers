#!/bin/bash
# Auteur : Bruno DELNOZ
# Email : bruno.delnoz@protonmail.com
# Nom du script : create_repo.sh
# Target usage : Initialise un d√©p√¥t Git local, cr√©e README.md, commit initial, cr√©e repo GitHub avec visibilit√© publique/priv√©e optionnelle, logs d√©taill√©s, gestion suppression propre
# Version : v2.2 - Date : 2025-07-19 - Corrections delete-all + fix permissions GitHub

LOG_FILE="${0%.*}.log"
CONFIG_FILE="$HOME/.create_repo_config"
DRY_RUN=false
REPO_CREATED=false
TEMPLATE=""

print_help() {
  echo "Usage: $0 --exec <repo-name> [OPTIONS] | --delete <repo-name> | --delete-force <repo-name> | --delete-all <repo-name>"
  echo "Options:"
  echo "  --exec         Cr√©e et initialise un d√©p√¥t Git nomm√© <repo-name>"
  echo "  --public       Rend le d√©p√¥t GitHub public"
  echo "  --private      Rend le d√©p√¥t GitHub priv√© (d√©faut)"
  echo "  --template     Utilise un template (python|web|basic)"
  echo "  --dry-run      Mode simulation, aucune action r√©elle"
  echo "  --delete       Supprime proprement le d√©p√¥t <repo-name> avec sauvegarde"
  echo "  --delete-force Supprime d√©finitivement le d√©p√¥t <repo-name> sans sauvegarde"
  echo "  --delete-all   Supprime tout ce que le script a cr√©√© pour <repo-name> avec sauvegarde"
  echo "  --config       Affiche la configuration actuelle"
  echo "Exemples:"
  echo "  $0 --exec MonDepot --public --template python"
  echo "  $0 --exec MonDepot --private --dry-run"
  echo "  $0 --delete MonDepot"
  echo "  $0 --config"
  exit 0
}

log() {
  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  local message="$timestamp - $1"
  echo "$message" | tee -a "$LOG_FILE"
}

load_config() {
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
    log "Configuration charg√©e depuis $CONFIG_FILE"
  else
    # D√©tection automatique du nom d'utilisateur GitHub
    OWNER=$(gh api user --jq .login 2>/dev/null || echo "bdelnoz")
    DEFAULT_BRANCH="main"
    log "Configuration par d√©faut utilis√©e (owner: $OWNER)"
  fi
}

show_config() {
  load_config
  echo "Configuration actuelle :"
  echo "  Propri√©taire GitHub : $OWNER"
  echo "  Branche par d√©faut : ${DEFAULT_BRANCH:-main}"
  echo "  Fichier de config : $CONFIG_FILE"
  echo "  Fichier de log : $LOG_FILE"
  exit 0
}

validate_repo_name() {
  if [ -z "$REPO_NAME" ]; then
    log "Erreur : nom du d√©p√¥t manquant."
    exit 1
  fi

  if [[ ! "$REPO_NAME" =~ ^[a-zA-Z0-9._-]+$ ]] || [ ${#REPO_NAME} -gt 100 ]; then
    log "Erreur : Nom invalide. Max 100 caract√®res, lettres/chiffres/points/tirets/underscores uniquement"
    exit 1
  fi
}

check_prerequisites() {
  if ! command -v git &>/dev/null; then
    log "Erreur : Git non install√©. Installer Git avant d'ex√©cuter ce script."
    exit 1
  fi
  if ! command -v gh &>/dev/null; then
    log "Erreur : GitHub CLI (gh) non install√©. Installer gh avant d'ex√©cuter ce script."
    exit 1
  fi
  if ! gh auth status &>/dev/null; then
    log "Erreur : Vous n'√™tes pas connect√© √† GitHub CLI (gh). Veuillez vous connecter avec 'gh auth login'."
    exit 1
  fi
}

safe_git_command() {
  local cmd="$1"
  local error_msg="$2"

  if [ "$DRY_RUN" = true ]; then
    log "[DRY-RUN] Commande : $cmd"
    return 0
  fi

  if ! eval "$cmd" >> "../$LOG_FILE" 2>&1; then
    log "ERREUR: $error_msg"
    log "Commande √©chou√©e: $cmd"
    exit 1
  fi
}

cleanup_on_failure() {
  if [ "$REPO_CREATED" = true ] && [ "$DRY_RUN" = false ]; then
    log "Nettoyage suite √† l'√©chec..."
    if [ -d "$HOME/git/$REPO_NAME" ]; then
      rm -rf "$HOME/git/$REPO_NAME"
    fi
    gh repo delete "$OWNER/$REPO_NAME" --yes 2>/dev/null || true
    log "Nettoyage termin√©"
  fi
}

create_from_template() {
  local template="$1"
  local readme_content=""

  case $template in
    "python")
      readme_content="# $REPO_NAME

## Description
Projet Python

## Installation
\`\`\`bash
pip install -r requirements.txt
\`\`\`

## Usage
\`\`\`bash
python main.py
\`\`\`

## Tests
\`\`\`bash
pytest
\`\`\`"

      # Cr√©ation du .gitignore Python
      cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv
.env
pip-log.txt
pip-delete-this-directory.txt
.coverage
.pytest_cache/
dist/
build/
*.egg-info/
EOF
      log "Template Python appliqu√© avec .gitignore"
      ;;
    "web")
      readme_content="# $REPO_NAME

## Demo
[Voir la d√©mo](https://github.com/$OWNER/$REPO_NAME)

## Installation
\`\`\`bash
npm install
\`\`\`

## D√©veloppement
\`\`\`bash
npm run dev
\`\`\`

## Build
\`\`\`bash
npm run build
\`\`\`"

      # Cr√©ation du .gitignore Web/Node.js
      cat > .gitignore << 'EOF'
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.eslintcache

# Build outputs
dist/
build/
*.tgz
*.tar.gz

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
EOF
      log "Template Web appliqu√© avec .gitignore"
      ;;
    "basic"|*)
      readme_content="# $REPO_NAME

## Description
Description du projet

## Installation
Instructions d'installation

## Usage
Instructions d'utilisation"
      ;;
  esac

  echo "$readme_content" > README.md
  log "Template '$template' appliqu√© au README.md"
}

confirm_deletion() {
  echo "ATTENTION: Suppression de '$REPO_NAME'. Tapez 'oui' pour confirmer:"
  read -r response
  if [ "$response" != "oui" ]; then
    log "Suppression annul√©e par l'utilisateur"
    exit 0
  fi
}

ensure_delete_permissions() {
  # V√©rifie si les permissions delete_repo sont disponibles
  # Pour les tokens, v√©rifie les scopes du token
  local auth_status
  auth_status=$(gh auth status 2>&1)

  if echo "$auth_status" | grep -q "Token:"; then
    # Utilisation d'un token - v√©rification des scopes
    echo "üîë D√©tection d'un token GitHub. V√©rification des permissions..."

    # Test direct de suppression pour v√©rifier les permissions
    local temp_test_result
    temp_test_result=$(gh api "/user" 2>&1)

    if [ $? -eq 0 ]; then
      echo "‚úÖ Token GitHub valide d√©tect√©"
      return 0
    else
      echo "‚ùå Probl√®me avec le token GitHub"
      echo "V√©rifiez que votre token a les scopes suivants :"
      echo "  - repo (acc√®s complet aux d√©p√¥ts)"
      echo "  - delete_repo (suppression de d√©p√¥ts)"
      echo ""
      echo "Pour mettre √† jour votre token :"
      echo "1. Allez sur GitHub.com > Settings > Developer settings > Personal access tokens"
      echo "2. Modifiez votre token pour inclure les scopes 'repo' et 'delete_repo'"
      echo "3. Mettez √† jour votre token avec : gh auth login --with-token"
      return 1
    fi
  else
    # Authentification interactive - tentative de refresh
    if ! echo "$auth_status" | grep -q "delete_repo"; then
      echo "‚ö†Ô∏è  Permissions 'delete_repo' manquantes. Tentative d'obtention automatique..."
      if gh auth refresh -h github.com -s delete_repo; then
        echo "‚úÖ Permissions 'delete_repo' obtenues avec succ√®s"
        return 0
      else
        echo "‚ùå √âchec de l'obtention automatique des permissions"
        echo "Veuillez ex√©cuter manuellement : gh auth refresh -h github.com -s delete_repo"
        return 1
      fi
    fi
  fi
  return 0
}

create_repo() {
  validate_repo_name

  if [ "$DRY_RUN" = true ]; then
    log "[DRY-RUN] Mode simulation - aucune action r√©elle effectu√©e"
  fi

  log "1. Cr√©ation du r√©pertoire '$REPO_NAME'"
  if [ "$DRY_RUN" = false ]; then
    mkdir -p "$HOME/git/$REPO_NAME"
  fi

  log "2. Acc√®s au r√©pertoire '$HOME/git/$REPO_NAME'"
  if [ "$DRY_RUN" = false ]; then
    cd "$HOME/git/$REPO_NAME" || { log "Erreur : Impossible d'entrer dans $HOME/git/$REPO_NAME"; exit 1; }
  fi

  log "3. V√©rification/Initialisation du d√©p√¥t Git local"
  if [ "$DRY_RUN" = false ]; then
    if [ -d ".git" ]; then
      log "D√©p√¥t Git existant d√©tect√© - conservation des branches existantes"
      git status >> "../$LOG_FILE" 2>&1
    else
      log "Initialisation d'un nouveau d√©p√¥t Git"
      git init >> "../$LOG_FILE" 2>&1
      REPO_CREATED=true
    fi
  fi

  log "4. Gestion du fichier README.md"
  if [ "$DRY_RUN" = false ]; then
    if [ ! -f "README.md" ]; then
      log "README.md n'existe pas, cr√©ation..."
      if [ -n "$TEMPLATE" ]; then
        create_from_template "$TEMPLATE"
      else
        echo "# $REPO_NAME" > README.md
      fi

      log "5. Ajout des fichiers au suivi Git"
      safe_git_command "git add ." "Impossible d'ajouter les fichiers"

      log "6. Commit initial"
      safe_git_command "git commit -m 'Initial commit'" "√âchec du commit initial"
    else
      log "README.md existe d√©j√†, pas de modification"
    fi
  fi

  # Configuration de la branche principale
  local default_branch="${DEFAULT_BRANCH:-main}"
  if [ "$default_branch" = "main" ] && [ "$DRY_RUN" = false ]; then
    current_branch=$(git branch --show-current 2>/dev/null || echo "")
    if [ "$current_branch" != "main" ] && ! git show-ref --verify --quiet refs/heads/main; then
      log "7. Renommage de la branche en 'main'"
      safe_git_command "git branch -M main" "Impossible de renommer la branche"
    fi
  fi

  log "8. Configuration du d√©p√¥t distant GitHub"
  if [ "$DRY_RUN" = false ]; then
    if ! git remote -v | grep -q "origin"; then
      log "Ajout du d√©p√¥t distant origin."
      git remote add origin "https://github.com/$OWNER/$REPO_NAME.git" >> "../$LOG_FILE" 2>&1
    fi
  fi

  local visibility_arg="private"
  if [ "$VISIBILITY" == "public" ]; then
    visibility_arg="public"
  fi

  log "9. Cr√©ation repo distant GitHub avec visibilit√© : $visibility_arg"
  if [ "$DRY_RUN" = false ]; then
    if gh repo view "$OWNER/$REPO_NAME" &>/dev/null; then
      log "Le repo distant '$OWNER/$REPO_NAME' existe d√©j√†. V√©rification visibilit√©..."
      current_visibility=$(gh repo view "$OWNER/$REPO_NAME" --json visibility -q .visibility)
      if [ "$current_visibility" != "$visibility_arg" ]; then
        log "Changement de visibilit√© de $current_visibility √† $visibility_arg"
        gh repo edit "$OWNER/$REPO_NAME" --visibility "$visibility_arg" >> "../$LOG_FILE" 2>&1
      else
        log "Visibilit√© d√©j√† $visibility_arg, aucun changement n√©cessaire."
      fi
    else
      gh repo create "$OWNER/$REPO_NAME" --"$visibility_arg" --source=. --remote=origin --push >> "../$LOG_FILE" 2>&1
    fi
  fi

  log "10. Cr√©ation branche 'Working' et configuration"
  if [ "$DRY_RUN" = false ]; then
    if gh repo view "$OWNER/$REPO_NAME" &>/dev/null; then
      log "R√©cup√©ration des branches distantes existantes..."
      git fetch origin >> "../$LOG_FILE" 2>&1 || true
    fi

    if git show-ref --verify --quiet refs/heads/Working; then
      log "La branche 'Working' existe d√©j√†"
    else
      git branch Working
      log "Branche 'Working' cr√©√©e"
    fi
    git checkout Working >> "../$LOG_FILE" 2>&1
    git push --set-upstream origin Working >> "../$LOG_FILE" 2>&1
  fi

  log "11. D√©p√¥t '$REPO_NAME' pr√™t (local + distant) dans ~/git/"
  if [ "$DRY_RUN" = false ]; then
    cd "$HOME" || exit 1
  fi
}

delete_repo() {
  validate_repo_name
  confirm_deletion

  if [ ! -d "$HOME/git/$REPO_NAME" ]; then
    log "Erreur : Le r√©pertoire '$HOME/git/$REPO_NAME' n'existe pas."
    exit 1
  fi

  BACKUP_NAME="${REPO_NAME}_backup_$(date +%Y%m%d%H%M%S).tar.gz"
  log "1. Sauvegarde du r√©pertoire '$HOME/git/$REPO_NAME' dans $BACKUP_NAME"
  tar -czf "$BACKUP_NAME" -C "$HOME/git" "$REPO_NAME"

  log "2. Suppression du r√©pertoire '$HOME/git/$REPO_NAME'"
  rm -rf "$HOME/git/$REPO_NAME"

  log "3. Suppression termin√©e, sauvegarde disponible : $BACKUP_NAME"
}

delete_force() {
  validate_repo_name
  confirm_deletion

  if [ ! -d "$HOME/git/$REPO_NAME" ]; then
    log "Erreur : Le r√©pertoire '$HOME/git/$REPO_NAME' n'existe pas."
    exit 1
  fi

  log "Suppression d√©finitive sans sauvegarde du r√©pertoire '$HOME/git/$REPO_NAME'"
  rm -rf "$HOME/git/$REPO_NAME"
  log "Suppression forc√©e termin√©e."
}

delete_all() {
  validate_repo_name
  confirm_deletion

  if [ ! -d "$HOME/git/$REPO_NAME" ]; then
    echo "Erreur : Le r√©pertoire '$HOME/git/$REPO_NAME' n'existe pas."
    exit 1
  fi

  BACKUP_NAME="${REPO_NAME}_full_backup_$(date +%Y%m%d%H%M%S).tar.gz"
  echo "1. Sauvegarde compl√®te du r√©pertoire '$HOME/git/$REPO_NAME' dans $BACKUP_NAME"
  tar -czf "$BACKUP_NAME" -C "$HOME/git" "$REPO_NAME"

  echo "2. Suppression du repo distant GitHub"
  if gh repo view "$OWNER/$REPO_NAME" &>/dev/null; then
    echo "Repo distant '$OWNER/$REPO_NAME' trouv√©, suppression en cours..."

    # V√©rification et gestion des permissions delete_repo
    local delete_error
    delete_error=$(gh repo delete "$OWNER/$REPO_NAME" --yes 2>&1)

    if [ $? -eq 0 ]; then
      echo "‚úÖ Repo distant supprim√© avec succ√®s"
    else
      if echo "$delete_error" | grep -q "403\|Must have admin rights\|delete_repo"; then
        echo "‚ùå Permissions insuffisantes d√©tect√©es"

        if ensure_delete_permissions; then
          echo "‚úÖ Tentative de nouvelle suppression..."
          if gh repo delete "$OWNER/$REPO_NAME" --yes; then
            echo "‚úÖ Repo distant supprim√© avec succ√®s"
          else
            echo "‚ùå √âchec de la suppression apr√®s v√©rification des permissions"
            echo "Probl√®me possible :"
            echo "  - Token sans les scopes 'repo' et 'delete_repo'"
            echo "  - Pas de droits admin sur le d√©p√¥t"
            echo "Suppression manuelle n√©cessaire : https://github.com/$OWNER/$REPO_NAME"
          fi
        else
          echo "‚ùå Impossible de r√©soudre le probl√®me de permissions"
          echo "Suppression manuelle n√©cessaire : https://github.com/$OWNER/$REPO_NAME"
        fi
      else
        echo "‚ùå Erreur lors de la suppression : $delete_error"
        echo "Suppression manuelle n√©cessaire : https://github.com/$OWNER/$REPO_NAME"
      fi
    fi
  else
    echo "‚ÑπÔ∏è  Repo distant '$OWNER/$REPO_NAME' n'existe pas ou d√©j√† supprim√©"
  fi

  echo "3. Suppression compl√®te du r√©pertoire local '$HOME/git/$REPO_NAME'"
  rm -rf "$HOME/git/$REPO_NAME"

  echo "4. Suppression du fichier log '$LOG_FILE'"
  if [ -f "$LOG_FILE" ]; then
    rm -f "$LOG_FILE"
  fi

  echo ""
  echo "üìã R√©sum√© de l'op√©ration delete-all :"
  echo "  ‚úÖ R√©pertoire local supprim√© : $HOME/git/$REPO_NAME"
  echo "  ‚úÖ Repo GitHub distant trait√© : $OWNER/$REPO_NAME"
  echo "  ‚úÖ Sauvegarde cr√©√©e : $BACKUP_NAME"
  echo "  ‚úÖ Fichier log supprim√©"
  echo ""
  echo "‚úÖ Suppression compl√®te termin√©e pour '$REPO_NAME'"
}

# Configuration du trap pour nettoyage en cas d'erreur
trap cleanup_on_failure ERR

# MAIN

if [ $# -eq 0 ] || [ "$1" == "--help" ]; then
  print_help
fi

# Chargement de la configuration
load_config

ACTION=$1
REPO_NAME=$2
VISIBILITY="private"

# Parse des options
for arg in "$@"; do
  case $arg in
    --public)
      VISIBILITY="public"
      ;;
    --private)
      VISIBILITY="private"
      ;;
    --dry-run)
      DRY_RUN=true
      ;;
    --template)
      shift 2
      TEMPLATE="$1"
      ;;
    --config)
      show_config
      ;;
  esac
done

# Traitement des templates sp√©cifiques
if [ "$#" -gt 2 ]; then
  for ((i=3; i<=$#; i++)); do
    arg=${!i}
    if [ "$arg" = "--template" ]; then
      next_i=$((i+1))
      if [ $next_i -le $# ]; then
        TEMPLATE=${!next_i}
        break
      fi
    fi
  done
fi

# Validation des pr√©requis sauf pour --config
if [ "$ACTION" != "--config" ]; then
  check_prerequisites
fi

case $ACTION in
  --exec)
    create_repo
    ;;
  --delete)
    delete_repo
    ;;
  --delete-force)
    delete_force
    ;;
  --delete-all)
    delete_all
    ;;
  --config)
    show_config
    ;;
  *)
    log "Erreur : Action inconnue '$ACTION'."
    print_help
    ;;
esac
